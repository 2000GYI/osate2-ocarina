/*
* generated by Xtext
*/
parser grammar InternalREALParser;

options {
	tokenVocab=InternalREALLexer;
	superClass=AbstractInternalContentAssistParser;
	
}

@header {
package org.osate.ocarina.real.xtext.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.osate.ocarina.real.xtext.services.REALGrammarAccess;

}

@members {
 
 	private REALGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("KEYWORD_1", "'|'");
		tokenNameToValue.put("KEYWORD_2", "'do'");
		tokenNameToValue.put("KEYWORD_3", "'if'");
		tokenNameToValue.put("KEYWORD_4", "'in'");
		tokenNameToValue.put("KEYWORD_5", "'or'");
		tokenNameToValue.put("KEYWORD_6", "'GCD'");
		tokenNameToValue.put("KEYWORD_7", "'LCM'");
		tokenNameToValue.put("KEYWORD_8", "'Max'");
		tokenNameToValue.put("KEYWORD_9", "'Min'");
		tokenNameToValue.put("KEYWORD_10", "'Sum'");
		tokenNameToValue.put("KEYWORD_11", "'and'");
		tokenNameToValue.put("KEYWORD_12", "'end'");
		tokenNameToValue.put("KEYWORD_13", "'mod'");
		tokenNameToValue.put("KEYWORD_14", "'not'");
		tokenNameToValue.put("KEYWORD_15", "'var'");
		tokenNameToValue.put("KEYWORD_16", "'Head'");
		tokenNameToValue.put("KEYWORD_17", "'Last'");
		tokenNameToValue.put("KEYWORD_18", "'List'");
		tokenNameToValue.put("KEYWORD_19", "'MMax'");
		tokenNameToValue.put("KEYWORD_20", "'MSum'");
		tokenNameToValue.put("KEYWORD_21", "'Size'");
		tokenNameToValue.put("KEYWORD_22", "'else'");
		tokenNameToValue.put("KEYWORD_23", "'then'");
		tokenNameToValue.put("KEYWORD_24", "'true'");
		tokenNameToValue.put("KEYWORD_25", "'First'");
		tokenNameToValue.put("KEYWORD_26", "'Float'");
		tokenNameToValue.put("KEYWORD_27", "'Is_In'");
		tokenNameToValue.put("KEYWORD_28", "'Queue'");
		tokenNameToValue.put("KEYWORD_29", "'check'");
		tokenNameToValue.put("KEYWORD_30", "'false'");
		tokenNameToValue.put("KEYWORD_31", "'Exists'");
		tokenNameToValue.put("KEYWORD_32", "'System'");
		tokenNameToValue.put("KEYWORD_33", "'return'");
		tokenNameToValue.put("KEYWORD_34", "'Product'");
		tokenNameToValue.put("KEYWORD_35", "'compute'");
		tokenNameToValue.put("KEYWORD_36", "'foreach'");
		tokenNameToValue.put("KEYWORD_37", "'theorem'");
		tokenNameToValue.put("KEYWORD_38", "'Cardinal'");
		tokenNameToValue.put("KEYWORD_39", "'Property'");
		tokenNameToValue.put("KEYWORD_40", "'requires'");
		tokenNameToValue.put("KEYWORD_41", "'All_Equals'");
		tokenNameToValue.put("KEYWORD_42", "'Is_Calling'");
		tokenNameToValue.put("KEYWORD_43", "'Is_Bound_To'");
		tokenNameToValue.put("KEYWORD_44", "'Is_Called_By'");
		tokenNameToValue.put("KEYWORD_45", "'Is_Accessed_By'");
		tokenNameToValue.put("KEYWORD_46", "'Is_Accessing_To'");
		tokenNameToValue.put("KEYWORD_47", "'Is_Connected_To'");
		tokenNameToValue.put("KEYWORD_48", "'Property_Exists'");
		tokenNameToValue.put("KEYWORD_49", "'Is_Connecting_To'");
		tokenNameToValue.put("KEYWORD_50", "'Is_Provided_Class'");
		tokenNameToValue.put("KEYWORD_51", "'Get_Property_Value'");
		tokenNameToValue.put("KEYWORD_52", "'Is_Passing_Through'");
		tokenNameToValue.put("KEYWORD_53", "'Is_Subcomponent_Of'");
		tokenNameToValue.put("KEYWORD_54", "'Compare_Property_Value'");
 	}
 	
    public void setGrammarAccess(REALGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getModelAccess().getTheoremsAssignment()); }
(rule__Model__TheoremsAssignment)*
{ after(grammarAccess.getModelAccess().getTheoremsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTheorem
entryRuleTheorem 
:
{ before(grammarAccess.getTheoremRule()); }
	 ruleTheorem
{ after(grammarAccess.getTheoremRule()); } 
	 EOF 
;

// Rule Theorem
ruleTheorem 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTheoremAccess().getGroup()); }
(rule__Theorem__Group__0)
{ after(grammarAccess.getTheoremAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRangeDefinition
entryRuleRangeDefinition 
:
{ before(grammarAccess.getRangeDefinitionRule()); }
	 ruleRangeDefinition
{ after(grammarAccess.getRangeDefinitionRule()); } 
	 EOF 
;

// Rule RangeDefinition
ruleRangeDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRangeDefinitionAccess().getGroup()); }
(rule__RangeDefinition__Group__0)
{ after(grammarAccess.getRangeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration 
:
{ before(grammarAccess.getVarDeclarationRule()); }
	 ruleVarDeclaration
{ after(grammarAccess.getVarDeclarationRule()); } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVarDeclarationAccess().getGroup()); }
(rule__VarDeclaration__Group__0)
{ after(grammarAccess.getVarDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetDeclaration
entryRuleSetDeclaration 
:
{ before(grammarAccess.getSetDeclarationRule()); }
	 ruleSetDeclaration
{ after(grammarAccess.getSetDeclarationRule()); } 
	 EOF 
;

// Rule SetDeclaration
ruleSetDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSetDeclarationAccess().getGroup()); }
(rule__SetDeclaration__Group__0)
{ after(grammarAccess.getSetDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElementBinding
entryRuleElementBinding 
:
{ before(grammarAccess.getElementBindingRule()); }
	 ruleElementBinding
{ after(grammarAccess.getElementBindingRule()); } 
	 EOF 
;

// Rule ElementBinding
ruleElementBinding 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getElementBindingAccess().getGroup()); }
(rule__ElementBinding__Group__0)
{ after(grammarAccess.getElementBindingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectionExpression
entryRuleSelectionExpression 
:
{ before(grammarAccess.getSelectionExpressionRule()); }
	 ruleSelectionExpression
{ after(grammarAccess.getSelectionExpressionRule()); } 
	 EOF 
;

// Rule SelectionExpression
ruleSelectionExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectionExpressionAccess().getGroup()); }
(rule__SelectionExpression__Group__0)
{ after(grammarAccess.getSelectionExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComputeExpression
entryRuleComputeExpression 
:
{ before(grammarAccess.getComputeExpressionRule()); }
	 ruleComputeExpression
{ after(grammarAccess.getComputeExpressionRule()); } 
	 EOF 
;

// Rule ComputeExpression
ruleComputeExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getComputeExpressionAccess().getGroup()); }
(rule__ComputeExpression__Group__0)
{ after(grammarAccess.getComputeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerminalSelectionExpression
entryRuleTerminalSelectionExpression 
:
{ before(grammarAccess.getTerminalSelectionExpressionRule()); }
	 ruleTerminalSelectionExpression
{ after(grammarAccess.getTerminalSelectionExpressionRule()); } 
	 EOF 
;

// Rule TerminalSelectionExpression
ruleTerminalSelectionExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTerminalSelectionExpressionAccess().getAlternatives()); }
(rule__TerminalSelectionExpression__Alternatives)
{ after(grammarAccess.getTerminalSelectionExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectionRelation
entryRuleSelectionRelation 
:
{ before(grammarAccess.getSelectionRelationRule()); }
	 ruleSelectionRelation
{ after(grammarAccess.getSelectionRelationRule()); } 
	 EOF 
;

// Rule SelectionRelation
ruleSelectionRelation 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectionRelationAccess().getGroup()); }
(rule__SelectionRelation__Group__0)
{ after(grammarAccess.getSelectionRelationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectionRelationIdentifier
entryRuleSelectionRelationIdentifier 
:
{ before(grammarAccess.getSelectionRelationIdentifierRule()); }
	 ruleSelectionRelationIdentifier
{ after(grammarAccess.getSelectionRelationIdentifierRule()); } 
	 EOF 
;

// Rule SelectionRelationIdentifier
ruleSelectionRelationIdentifier 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectionRelationIdentifierAccess().getAlternatives()); }
(rule__SelectionRelationIdentifier__Alternatives)
{ after(grammarAccess.getSelectionRelationIdentifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectionRelationParameter
entryRuleSelectionRelationParameter 
:
{ before(grammarAccess.getSelectionRelationParameterRule()); }
	 ruleSelectionRelationParameter
{ after(grammarAccess.getSelectionRelationParameterRule()); } 
	 EOF 
;

// Rule SelectionRelationParameter
ruleSelectionRelationParameter 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectionRelationParameterAccess().getAlternatives()); }
(rule__SelectionRelationParameter__Alternatives)
{ after(grammarAccess.getSelectionRelationParameterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRequiredDefinition
entryRuleRequiredDefinition 
:
{ before(grammarAccess.getRequiredDefinitionRule()); }
	 ruleRequiredDefinition
{ after(grammarAccess.getRequiredDefinitionRule()); } 
	 EOF 
;

// Rule RequiredDefinition
ruleRequiredDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRequiredDefinitionAccess().getGroup()); }
(rule__RequiredDefinition__Group__0)
{ after(grammarAccess.getRequiredDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVerificationExpression
entryRuleVerificationExpression 
:
{ before(grammarAccess.getVerificationExpressionRule()); }
	 ruleVerificationExpression
{ after(grammarAccess.getVerificationExpressionRule()); } 
	 EOF 
;

// Rule VerificationExpression
ruleVerificationExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVerificationExpressionAccess().getGroup()); }
(rule__VerificationExpression__Group__0)
{ after(grammarAccess.getVerificationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvaluationExpression
entryRuleEvaluationExpression 
:
{ before(grammarAccess.getEvaluationExpressionRule()); }
	 ruleEvaluationExpression
{ after(grammarAccess.getEvaluationExpressionRule()); } 
	 EOF 
;

// Rule EvaluationExpression
ruleEvaluationExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEvaluationExpressionAccess().getGroup()); }
(rule__EvaluationExpression__Group__0)
{ after(grammarAccess.getEvaluationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGenericExpression
entryRuleGenericExpression 
:
{ before(grammarAccess.getGenericExpressionRule()); }
	 ruleGenericExpression
{ after(grammarAccess.getGenericExpressionRule()); } 
	 EOF 
;

// Rule GenericExpression
ruleGenericExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGenericExpressionAccess().getGroup()); }
(rule__GenericExpression__Group__0)
{ after(grammarAccess.getGenericExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerminalGenericExpression
entryRuleTerminalGenericExpression 
:
{ before(grammarAccess.getTerminalGenericExpressionRule()); }
	 ruleTerminalGenericExpression
{ after(grammarAccess.getTerminalGenericExpressionRule()); } 
	 EOF 
;

// Rule TerminalGenericExpression
ruleTerminalGenericExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTerminalGenericExpressionAccess().getGroup()); }
(rule__TerminalGenericExpression__Group__0)
{ after(grammarAccess.getTerminalGenericExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetExpression
entryRuleSetExpression 
:
{ before(grammarAccess.getSetExpressionRule()); }
	 ruleSetExpression
{ after(grammarAccess.getSetExpressionRule()); } 
	 EOF 
;

// Rule SetExpression
ruleSetExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSetExpressionAccess().getGroup()); }
(rule__SetExpression__Group__0)
{ after(grammarAccess.getSetExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerminalSetExpression
entryRuleTerminalSetExpression 
:
{ before(grammarAccess.getTerminalSetExpressionRule()); }
	 ruleTerminalSetExpression
{ after(grammarAccess.getTerminalSetExpressionRule()); } 
	 EOF 
;

// Rule TerminalSetExpression
ruleTerminalSetExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTerminalSetExpressionAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getTerminalSetExpressionAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTernaryExpression
entryRuleTernaryExpression 
:
{ before(grammarAccess.getTernaryExpressionRule()); }
	 ruleTernaryExpression
{ after(grammarAccess.getTernaryExpressionRule()); } 
	 EOF 
;

// Rule TernaryExpression
ruleTernaryExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTernaryExpressionAccess().getGroup()); }
(rule__TernaryExpression__Group__0)
{ after(grammarAccess.getTernaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVerificationFunctionCall
entryRuleVerificationFunctionCall 
:
{ before(grammarAccess.getVerificationFunctionCallRule()); }
	 ruleVerificationFunctionCall
{ after(grammarAccess.getVerificationFunctionCallRule()); } 
	 EOF 
;

// Rule VerificationFunctionCall
ruleVerificationFunctionCall 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVerificationFunctionCallAccess().getGroup()); }
(rule__VerificationFunctionCall__Group__0)
{ after(grammarAccess.getVerificationFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVerificationFunctionParameter
entryRuleVerificationFunctionParameter 
:
{ before(grammarAccess.getVerificationFunctionParameterRule()); }
	 ruleVerificationFunctionParameter
{ after(grammarAccess.getVerificationFunctionParameterRule()); } 
	 EOF 
;

// Rule VerificationFunctionParameter
ruleVerificationFunctionParameter 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVerificationFunctionParameterAccess().getAlternatives()); }
(rule__VerificationFunctionParameter__Alternatives)
{ after(grammarAccess.getVerificationFunctionParameterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAggregationFunctionIdentifier
entryRuleAggregationFunctionIdentifier 
:
{ before(grammarAccess.getAggregationFunctionIdentifierRule()); }
	 ruleAggregationFunctionIdentifier
{ after(grammarAccess.getAggregationFunctionIdentifierRule()); } 
	 EOF 
;

// Rule AggregationFunctionIdentifier
ruleAggregationFunctionIdentifier 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAggregationFunctionIdentifierAccess().getAlternatives()); }
(rule__AggregationFunctionIdentifier__Alternatives)
{ after(grammarAccess.getAggregationFunctionIdentifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVerificationFunctionIdentifier
entryRuleVerificationFunctionIdentifier 
:
{ before(grammarAccess.getVerificationFunctionIdentifierRule()); }
	 ruleVerificationFunctionIdentifier
{ after(grammarAccess.getVerificationFunctionIdentifierRule()); } 
	 EOF 
;

// Rule VerificationFunctionIdentifier
ruleVerificationFunctionIdentifier 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getAlternatives()); }
(rule__VerificationFunctionIdentifier__Alternatives)
{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGenericOperator
entryRuleGenericOperator 
:
{ before(grammarAccess.getGenericOperatorRule()); }
	 ruleGenericOperator
{ after(grammarAccess.getGenericOperatorRule()); } 
	 EOF 
;

// Rule GenericOperator
ruleGenericOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGenericOperatorAccess().getAlternatives()); }
(rule__GenericOperator__Alternatives)
{ after(grammarAccess.getGenericOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN 
:
{ before(grammarAccess.getBOOLEANRule()); }
	 ruleBOOLEAN
{ after(grammarAccess.getBOOLEANRule()); } 
	 EOF 
;

// Rule BOOLEAN
ruleBOOLEAN 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBOOLEANAccess().getValueAssignment()); }
(rule__BOOLEAN__ValueAssignment)
{ after(grammarAccess.getBOOLEANAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetOperator
entryRuleSetOperator 
:
{ before(grammarAccess.getSetOperatorRule()); }
	 ruleSetOperator
{ after(grammarAccess.getSetOperatorRule()); } 
	 EOF 
;

// Rule SetOperator
ruleSetOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSetOperatorAccess().getAlternatives()); }
(rule__SetOperator__Alternatives)
{ after(grammarAccess.getSetOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArithmeticOperator
entryRuleArithmeticOperator 
:
{ before(grammarAccess.getArithmeticOperatorRule()); }
	 ruleArithmeticOperator
{ after(grammarAccess.getArithmeticOperatorRule()); } 
	 EOF 
;

// Rule ArithmeticOperator
ruleArithmeticOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getArithmeticOperatorAccess().getAlternatives()); }
(rule__ArithmeticOperator__Alternatives)
{ after(grammarAccess.getArithmeticOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanOperator
entryRuleBooleanOperator 
:
{ before(grammarAccess.getBooleanOperatorRule()); }
	 ruleBooleanOperator
{ after(grammarAccess.getBooleanOperatorRule()); } 
	 EOF 
;

// Rule BooleanOperator
ruleBooleanOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBooleanOperatorAccess().getAlternatives()); }
(rule__BooleanOperator__Alternatives)
{ after(grammarAccess.getBooleanOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator 
:
{ before(grammarAccess.getUnaryOperatorRule()); }
	 ruleUnaryOperator
{ after(grammarAccess.getUnaryOperatorRule()); } 
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnaryOperatorAccess().getNotKeyword()); }

	KEYWORD_14 

{ after(grammarAccess.getUnaryOperatorAccess().getNotKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisonOperator
entryRuleComparisonOperator 
:
{ before(grammarAccess.getComparisonOperatorRule()); }
	 ruleComparisonOperator
{ after(grammarAccess.getComparisonOperatorRule()); } 
	 EOF 
;

// Rule ComparisonOperator
ruleComparisonOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getComparisonOperatorAccess().getAlternatives()); }
(rule__ComparisonOperator__Alternatives)
{ after(grammarAccess.getComparisonOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Theorem__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getVarDeclarationsAssignment_4_0()); }
(rule__Theorem__VarDeclarationsAssignment_4_0)
{ after(grammarAccess.getTheoremAccess().getVarDeclarationsAssignment_4_0()); }
)

    |(
{ before(grammarAccess.getTheoremAccess().getSetDeclarationsAssignment_4_1()); }
(rule__Theorem__SetDeclarationsAssignment_4_1)
{ after(grammarAccess.getTheoremAccess().getSetDeclarationsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Alternatives_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getVerificationExpressionAssignment_5_0()); }
(rule__Theorem__VerificationExpressionAssignment_5_0)
{ after(grammarAccess.getTheoremAccess().getVerificationExpressionAssignment_5_0()); }
)

    |(
{ before(grammarAccess.getTheoremAccess().getEvaluationExpressionAssignment_5_1()); }
(rule__Theorem__EvaluationExpressionAssignment_5_1)
{ after(grammarAccess.getTheoremAccess().getEvaluationExpressionAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSelectionExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalSelectionExpressionAccess().getCAssignment_0()); }
(rule__TerminalSelectionExpression__CAssignment_0)
{ after(grammarAccess.getTerminalSelectionExpressionAccess().getCAssignment_0()); }
)

    |(
{ before(grammarAccess.getTerminalSelectionExpressionAccess().getEAssignment_1()); }
(rule__TerminalSelectionExpression__EAssignment_1)
{ after(grammarAccess.getTerminalSelectionExpressionAccess().getEAssignment_1()); }
)

    |(
{ before(grammarAccess.getTerminalSelectionExpressionAccess().getRAssignment_2()); }
(rule__TerminalSelectionExpression__RAssignment_2)
{ after(grammarAccess.getTerminalSelectionExpressionAccess().getRAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionRelationIdentifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Subcomponent_OfKeyword_0()); }

	KEYWORD_53 

{ after(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Subcomponent_OfKeyword_0()); }
)

    |(
{ before(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Bound_ToKeyword_1()); }

	KEYWORD_43 

{ after(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Bound_ToKeyword_1()); }
)

    |(
{ before(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Provided_ClassKeyword_2()); }

	KEYWORD_50 

{ after(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Provided_ClassKeyword_2()); }
)

    |(
{ before(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Connected_ToKeyword_3()); }

	KEYWORD_47 

{ after(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Connected_ToKeyword_3()); }
)

    |(
{ before(grammarAccess.getSelectionRelationIdentifierAccess().getCompare_Property_ValueKeyword_4()); }

	KEYWORD_54 

{ after(grammarAccess.getSelectionRelationIdentifierAccess().getCompare_Property_ValueKeyword_4()); }
)

    |(
{ before(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Called_ByKeyword_5()); }

	KEYWORD_44 

{ after(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Called_ByKeyword_5()); }
)

    |(
{ before(grammarAccess.getSelectionRelationIdentifierAccess().getIs_CallingKeyword_6()); }

	KEYWORD_42 

{ after(grammarAccess.getSelectionRelationIdentifierAccess().getIs_CallingKeyword_6()); }
)

    |(
{ before(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Accessed_ByKeyword_7()); }

	KEYWORD_45 

{ after(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Accessed_ByKeyword_7()); }
)

    |(
{ before(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Connecting_ToKeyword_8()); }

	KEYWORD_49 

{ after(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Connecting_ToKeyword_8()); }
)

    |(
{ before(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Accessing_ToKeyword_9()); }

	KEYWORD_46 

{ after(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Accessing_ToKeyword_9()); }
)

    |(
{ before(grammarAccess.getSelectionRelationIdentifierAccess().getIs_InKeyword_10()); }

	KEYWORD_27 

{ after(grammarAccess.getSelectionRelationIdentifierAccess().getIs_InKeyword_10()); }
)

    |(
{ before(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Passing_ThroughKeyword_11()); }

	KEYWORD_52 

{ after(grammarAccess.getSelectionRelationIdentifierAccess().getIs_Passing_ThroughKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionRelationParameter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionRelationParameterAccess().getLAssignment_0()); }
(rule__SelectionRelationParameter__LAssignment_0)
{ after(grammarAccess.getSelectionRelationParameterAccess().getLAssignment_0()); }
)

    |(
{ before(grammarAccess.getSelectionRelationParameterAccess().getIdentifierAssignment_1()); }
(rule__SelectionRelationParameter__IdentifierAssignment_1)
{ after(grammarAccess.getSelectionRelationParameterAccess().getIdentifierAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalGenericExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalGenericExpressionAccess().getLiteralAssignment_1_0()); }
(rule__TerminalGenericExpression__LiteralAssignment_1_0)
{ after(grammarAccess.getTerminalGenericExpressionAccess().getLiteralAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getTerminalGenericExpressionAccess().getFcAssignment_1_1()); }
(rule__TerminalGenericExpression__FcAssignment_1_1)
{ after(grammarAccess.getTerminalGenericExpressionAccess().getFcAssignment_1_1()); }
)

    |(
{ before(grammarAccess.getTerminalGenericExpressionAccess().getTeAssignment_1_2()); }
(rule__TerminalGenericExpression__TeAssignment_1_2)
{ after(grammarAccess.getTerminalGenericExpressionAccess().getTeAssignment_1_2()); }
)

    |(
{ before(grammarAccess.getTerminalGenericExpressionAccess().getGroup_1_3()); }
(rule__TerminalGenericExpression__Group_1_3__0)
{ after(grammarAccess.getTerminalGenericExpressionAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationFunctionParameter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationFunctionParameterAccess().getLAssignment_0()); }
(rule__VerificationFunctionParameter__LAssignment_0)
{ after(grammarAccess.getVerificationFunctionParameterAccess().getLAssignment_0()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionParameterAccess().getIdentifierAssignment_1()); }
(rule__VerificationFunctionParameter__IdentifierAssignment_1)
{ after(grammarAccess.getVerificationFunctionParameterAccess().getIdentifierAssignment_1()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionParameterAccess().getVfiAssignment_2()); }
(rule__VerificationFunctionParameter__VfiAssignment_2)
{ after(grammarAccess.getVerificationFunctionParameterAccess().getVfiAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AggregationFunctionIdentifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregationFunctionIdentifierAccess().getMSumKeyword_0()); }

	KEYWORD_20 

{ after(grammarAccess.getAggregationFunctionIdentifierAccess().getMSumKeyword_0()); }
)

    |(
{ before(grammarAccess.getAggregationFunctionIdentifierAccess().getMMaxKeyword_1()); }

	KEYWORD_19 

{ after(grammarAccess.getAggregationFunctionIdentifierAccess().getMMaxKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationFunctionIdentifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getCardinalKeyword_0()); }

	KEYWORD_38 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getCardinalKeyword_0()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getSumKeyword_1()); }

	KEYWORD_10 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getSumKeyword_1()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getMaxKeyword_2()); }

	KEYWORD_8 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getMaxKeyword_2()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getMinKeyword_3()); }

	KEYWORD_9 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getMinKeyword_3()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getProductKeyword_4()); }

	KEYWORD_34 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getProductKeyword_4()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getGCDKeyword_5()); }

	KEYWORD_6 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getGCDKeyword_5()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getLCMKeyword_6()); }

	KEYWORD_7 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getLCMKeyword_6()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getGet_Property_ValueKeyword_7()); }

	KEYWORD_51 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getGet_Property_ValueKeyword_7()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getPropertyKeyword_8()); }

	KEYWORD_39 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getPropertyKeyword_8()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getProperty_ExistsKeyword_9()); }

	KEYWORD_48 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getProperty_ExistsKeyword_9()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getAll_EqualsKeyword_10()); }

	KEYWORD_41 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getAll_EqualsKeyword_10()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getExistsKeyword_11()); }

	KEYWORD_31 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getExistsKeyword_11()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getSystemKeyword_12()); }

	KEYWORD_32 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getSystemKeyword_12()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getFirstKeyword_13()); }

	KEYWORD_25 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getFirstKeyword_13()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getLastKeyword_14()); }

	KEYWORD_17 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getLastKeyword_14()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getHeadKeyword_15()); }

	KEYWORD_16 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getHeadKeyword_15()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getQueueKeyword_16()); }

	KEYWORD_28 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getQueueKeyword_16()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getListKeyword_17()); }

	KEYWORD_18 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getListKeyword_17()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getSizeKeyword_18()); }

	KEYWORD_21 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getSizeKeyword_18()); }
)

    |(
{ before(grammarAccess.getVerificationFunctionIdentifierAccess().getFloatKeyword_19()); }

	KEYWORD_26 

{ after(grammarAccess.getVerificationFunctionIdentifierAccess().getFloatKeyword_19()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GenericOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericOperatorAccess().getComparisonOperatorParserRuleCall_0()); }
	ruleComparisonOperator
{ after(grammarAccess.getGenericOperatorAccess().getComparisonOperatorParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getGenericOperatorAccess().getBooleanOperatorParserRuleCall_1()); }
	ruleBooleanOperator
{ after(grammarAccess.getGenericOperatorAccess().getBooleanOperatorParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getGenericOperatorAccess().getArithmeticOperatorParserRuleCall_2()); }
	ruleArithmeticOperator
{ after(grammarAccess.getGenericOperatorAccess().getArithmeticOperatorParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getBAssignment_0()); }
(rule__Literal__BAssignment_0)
{ after(grammarAccess.getLiteralAccess().getBAssignment_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getSAssignment_1()); }
(rule__Literal__SAssignment_1)
{ after(grammarAccess.getLiteralAccess().getSAssignment_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getNAssignment_2()); }
(rule__Literal__NAssignment_2)
{ after(grammarAccess.getLiteralAccess().getNAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BOOLEAN__ValueAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOOLEANAccess().getValueTrueKeyword_0_0()); }

	KEYWORD_24 

{ after(grammarAccess.getBOOLEANAccess().getValueTrueKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getBOOLEANAccess().getValueFalseKeyword_0_1()); }

	KEYWORD_30 

{ after(grammarAccess.getBOOLEANAccess().getValueFalseKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetOperatorAccess().getPLUSTerminalRuleCall_0()); }
	RULE_PLUS
{ after(grammarAccess.getSetOperatorAccess().getPLUSTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSetOperatorAccess().getSTARTerminalRuleCall_1()); }
	RULE_STAR
{ after(grammarAccess.getSetOperatorAccess().getSTARTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSetOperatorAccess().getSLASHTerminalRuleCall_2()); }
	RULE_SLASH
{ after(grammarAccess.getSetOperatorAccess().getSLASHTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticOperatorAccess().getPLUSTerminalRuleCall_0()); }
	RULE_PLUS
{ after(grammarAccess.getArithmeticOperatorAccess().getPLUSTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getArithmeticOperatorAccess().getMINUSTerminalRuleCall_1()); }
	RULE_MINUS
{ after(grammarAccess.getArithmeticOperatorAccess().getMINUSTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getArithmeticOperatorAccess().getSTARTerminalRuleCall_2()); }
	RULE_STAR
{ after(grammarAccess.getArithmeticOperatorAccess().getSTARTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getArithmeticOperatorAccess().getSLASHTerminalRuleCall_3()); }
	RULE_SLASH
{ after(grammarAccess.getArithmeticOperatorAccess().getSLASHTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getArithmeticOperatorAccess().getPOWERTerminalRuleCall_4()); }
	RULE_POWER
{ after(grammarAccess.getArithmeticOperatorAccess().getPOWERTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getArithmeticOperatorAccess().getModKeyword_5()); }

	KEYWORD_13 

{ after(grammarAccess.getArithmeticOperatorAccess().getModKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOperatorAccess().getAndKeyword_0()); }

	KEYWORD_11 

{ after(grammarAccess.getBooleanOperatorAccess().getAndKeyword_0()); }
)

    |(
{ before(grammarAccess.getBooleanOperatorAccess().getNotKeyword_1()); }

	KEYWORD_14 

{ after(grammarAccess.getBooleanOperatorAccess().getNotKeyword_1()); }
)

    |(
{ before(grammarAccess.getBooleanOperatorAccess().getOrKeyword_2()); }

	KEYWORD_5 

{ after(grammarAccess.getBooleanOperatorAccess().getOrKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorAccess().getLESSTerminalRuleCall_0()); }
	RULE_LESS
{ after(grammarAccess.getComparisonOperatorAccess().getLESSTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getLESS_EQUALTerminalRuleCall_1()); }
	RULE_LESS_EQUAL
{ after(grammarAccess.getComparisonOperatorAccess().getLESS_EQUALTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getEQUALTerminalRuleCall_2()); }
	RULE_EQUAL
{ after(grammarAccess.getComparisonOperatorAccess().getEQUALTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getGREATER_EQUALTerminalRuleCall_3()); }
	RULE_GREATER_EQUAL
{ after(grammarAccess.getComparisonOperatorAccess().getGREATER_EQUALTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getGREATERTerminalRuleCall_4()); }
	RULE_GREATER
{ after(grammarAccess.getComparisonOperatorAccess().getGREATERTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getNOT_EQUALTerminalRuleCall_5()); }
	RULE_NOT_EQUAL
{ after(grammarAccess.getComparisonOperatorAccess().getNOT_EQUALTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Theorem__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__0__Impl
	rule__Theorem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getTheoremKeyword_0()); }

	KEYWORD_37 

{ after(grammarAccess.getTheoremAccess().getTheoremKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Theorem__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__1__Impl
	rule__Theorem__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getNameAssignment_1()); }
(rule__Theorem__NameAssignment_1)
{ after(grammarAccess.getTheoremAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Theorem__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__2__Impl
	rule__Theorem__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getRangeDefinitionAssignment_2()); }
(rule__Theorem__RangeDefinitionAssignment_2)
{ after(grammarAccess.getTheoremAccess().getRangeDefinitionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Theorem__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__3__Impl
	rule__Theorem__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getRequiredDefinitionAssignment_3()); }
(rule__Theorem__RequiredDefinitionAssignment_3)?
{ after(grammarAccess.getTheoremAccess().getRequiredDefinitionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Theorem__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__4__Impl
	rule__Theorem__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getAlternatives_4()); }
(rule__Theorem__Alternatives_4)*
{ after(grammarAccess.getTheoremAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Theorem__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__5__Impl
	rule__Theorem__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getAlternatives_5()); }
(rule__Theorem__Alternatives_5)
{ after(grammarAccess.getTheoremAccess().getAlternatives_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Theorem__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__6__Impl
	rule__Theorem__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getEndKeyword_6()); }

	KEYWORD_12 

{ after(grammarAccess.getTheoremAccess().getEndKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Theorem__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__7__Impl
	rule__Theorem__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getEndNameAssignment_7()); }
(rule__Theorem__EndNameAssignment_7)?
{ after(grammarAccess.getTheoremAccess().getEndNameAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Theorem__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Theorem__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getPUNC_SEMI_COLONTerminalRuleCall_8()); }
	RULE_PUNC_SEMI_COLON
{ after(grammarAccess.getTheoremAccess().getPUNC_SEMI_COLONTerminalRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__RangeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeDefinition__Group__0__Impl
	rule__RangeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeDefinitionAccess().getForeachKeyword_0()); }

	KEYWORD_36 

{ after(grammarAccess.getRangeDefinitionAccess().getForeachKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeDefinition__Group__1__Impl
	rule__RangeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeDefinitionAccess().getElementAssignment_1()); }
(rule__RangeDefinition__ElementAssignment_1)
{ after(grammarAccess.getRangeDefinitionAccess().getElementAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeDefinition__Group__2__Impl
	rule__RangeDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeDefinitionAccess().getInKeyword_2()); }

	KEYWORD_4 

{ after(grammarAccess.getRangeDefinitionAccess().getInKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeDefinition__Group__3__Impl
	rule__RangeDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeDefinitionAccess().getSetAssignment_3()); }
(rule__RangeDefinition__SetAssignment_3)
{ after(grammarAccess.getRangeDefinitionAccess().getSetAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeDefinitionAccess().getDoKeyword_4()); }

	KEYWORD_2 

{ after(grammarAccess.getRangeDefinitionAccess().getDoKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VarDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDeclaration__Group__0__Impl
	rule__VarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getVarKeyword_0()); }

	KEYWORD_15 

{ after(grammarAccess.getVarDeclarationAccess().getVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDeclaration__Group__1__Impl
	rule__VarDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getIdentifierAssignment_1()); }
(rule__VarDeclaration__IdentifierAssignment_1)
{ after(grammarAccess.getVarDeclarationAccess().getIdentifierAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDeclaration__Group__2__Impl
	rule__VarDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getAFFECTATION_OPERATORTerminalRuleCall_2()); }
	RULE_AFFECTATION_OPERATOR
{ after(grammarAccess.getVarDeclarationAccess().getAFFECTATION_OPERATORTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDeclaration__Group__3__Impl
	rule__VarDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getExprAssignment_3()); }
(rule__VarDeclaration__ExprAssignment_3)
{ after(grammarAccess.getVarDeclarationAccess().getExprAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getPUNC_SEMI_COLONTerminalRuleCall_4()); }
	RULE_PUNC_SEMI_COLON
{ after(grammarAccess.getVarDeclarationAccess().getPUNC_SEMI_COLONTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SetDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetDeclaration__Group__0__Impl
	rule__SetDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetDeclarationAccess().getSetAssignment_0()); }
(rule__SetDeclaration__SetAssignment_0)
{ after(grammarAccess.getSetDeclarationAccess().getSetAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetDeclaration__Group__1__Impl
	rule__SetDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetDeclarationAccess().getGroup_1()); }
(rule__SetDeclaration__Group_1__0)?
{ after(grammarAccess.getSetDeclarationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetDeclaration__Group__2__Impl
	rule__SetDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetDeclarationAccess().getAFFECTATION_OPERATORTerminalRuleCall_2()); }
	RULE_AFFECTATION_OPERATOR
{ after(grammarAccess.getSetDeclarationAccess().getAFFECTATION_OPERATORTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetDeclaration__Group__3__Impl
	rule__SetDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetDeclarationAccess().getPUNC_OPEN_BRACETerminalRuleCall_3()); }
	RULE_PUNC_OPEN_BRACE
{ after(grammarAccess.getSetDeclarationAccess().getPUNC_OPEN_BRACETerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetDeclaration__Group__4__Impl
	rule__SetDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetDeclarationAccess().getElementBindingAssignment_4()); }
(rule__SetDeclaration__ElementBindingAssignment_4)
{ after(grammarAccess.getSetDeclarationAccess().getElementBindingAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetDeclaration__Group__5__Impl
	rule__SetDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetDeclarationAccess().getVerticalLineKeyword_5()); }

	KEYWORD_1 

{ after(grammarAccess.getSetDeclarationAccess().getVerticalLineKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetDeclaration__Group__6__Impl
	rule__SetDeclaration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetDeclarationAccess().getExprAssignment_6()); }
(rule__SetDeclaration__ExprAssignment_6)
{ after(grammarAccess.getSetDeclarationAccess().getExprAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetDeclaration__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetDeclaration__Group__7__Impl
	rule__SetDeclaration__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDeclaration__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetDeclarationAccess().getPUNC_CLOSE_BRACETerminalRuleCall_7()); }
	RULE_PUNC_CLOSE_BRACE
{ after(grammarAccess.getSetDeclarationAccess().getPUNC_CLOSE_BRACETerminalRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetDeclaration__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetDeclaration__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDeclaration__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetDeclarationAccess().getPUNC_SEMI_COLONTerminalRuleCall_8()); }
	RULE_PUNC_SEMI_COLON
{ after(grammarAccess.getSetDeclarationAccess().getPUNC_SEMI_COLONTerminalRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__SetDeclaration__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetDeclaration__Group_1__0__Impl
	rule__SetDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDeclaration__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetDeclarationAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1_0()); }
	RULE_PUNC_OPEN_PARENTHESIS
{ after(grammarAccess.getSetDeclarationAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetDeclaration__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetDeclaration__Group_1__1__Impl
	rule__SetDeclaration__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDeclaration__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetDeclarationAccess().getParamIdentifierAssignment_1_1()); }
(rule__SetDeclaration__ParamIdentifierAssignment_1_1)
{ after(grammarAccess.getSetDeclarationAccess().getParamIdentifierAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetDeclaration__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetDeclaration__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDeclaration__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetDeclarationAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_1_2()); }
	RULE_PUNC_CLOSE_PARENTHESIS
{ after(grammarAccess.getSetDeclarationAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ElementBinding__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementBinding__Group__0__Impl
	rule__ElementBinding__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementBinding__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementBindingAccess().getElementAssignment_0()); }
(rule__ElementBinding__ElementAssignment_0)
{ after(grammarAccess.getElementBindingAccess().getElementAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementBinding__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementBinding__Group__1__Impl
	rule__ElementBinding__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementBinding__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementBindingAccess().getInKeyword_1()); }

	KEYWORD_4 

{ after(grammarAccess.getElementBindingAccess().getInKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementBinding__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementBinding__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementBinding__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementBindingAccess().getSetAssignment_2()); }
(rule__ElementBinding__SetAssignment_2)
{ after(grammarAccess.getElementBindingAccess().getSetAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SelectionExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionExpression__Group__0__Impl
	rule__SelectionExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionExpressionAccess().getE1Assignment_0()); }
(rule__SelectionExpression__E1Assignment_0)
{ after(grammarAccess.getSelectionExpressionAccess().getE1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionExpressionAccess().getGroup_1()); }
(rule__SelectionExpression__Group_1__0)*
{ after(grammarAccess.getSelectionExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectionExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionExpression__Group_1__0__Impl
	rule__SelectionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionExpressionAccess().getOpAssignment_1_0()); }
(rule__SelectionExpression__OpAssignment_1_0)
{ after(grammarAccess.getSelectionExpressionAccess().getOpAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionExpressionAccess().getE2Assignment_1_1()); }
(rule__SelectionExpression__E2Assignment_1_1)
{ after(grammarAccess.getSelectionExpressionAccess().getE2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComputeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComputeExpression__Group__0__Impl
	rule__ComputeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComputeExpressionAccess().getComputeKeyword_0()); }

	KEYWORD_35 

{ after(grammarAccess.getComputeExpressionAccess().getComputeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComputeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComputeExpression__Group__1__Impl
	rule__ComputeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComputeExpressionAccess().getIdentifierAssignment_1()); }
(rule__ComputeExpression__IdentifierAssignment_1)
{ after(grammarAccess.getComputeExpressionAccess().getIdentifierAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComputeExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComputeExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComputeExpressionAccess().getGroup_2()); }
(rule__ComputeExpression__Group_2__0)?
{ after(grammarAccess.getComputeExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComputeExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComputeExpression__Group_2__0__Impl
	rule__ComputeExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComputeExpressionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_2_0()); }
	RULE_PUNC_OPEN_PARENTHESIS
{ after(grammarAccess.getComputeExpressionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComputeExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComputeExpression__Group_2__1__Impl
	rule__ComputeExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComputeExpressionAccess().getNameAssignment_2_1()); }
(rule__ComputeExpression__NameAssignment_2_1)
{ after(grammarAccess.getComputeExpressionAccess().getNameAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComputeExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComputeExpression__Group_2__2__Impl
	rule__ComputeExpression__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComputeExpressionAccess().getGroup_2_2()); }
(rule__ComputeExpression__Group_2_2__0)*
{ after(grammarAccess.getComputeExpressionAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComputeExpression__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComputeExpression__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeExpression__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComputeExpressionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_2_3()); }
	RULE_PUNC_CLOSE_PARENTHESIS
{ after(grammarAccess.getComputeExpressionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ComputeExpression__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComputeExpression__Group_2_2__0__Impl
	rule__ComputeExpression__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeExpression__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComputeExpressionAccess().getPUNC_COMMATerminalRuleCall_2_2_0()); }
	RULE_PUNC_COMMA
{ after(grammarAccess.getComputeExpressionAccess().getPUNC_COMMATerminalRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComputeExpression__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComputeExpression__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeExpression__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComputeExpressionAccess().getNameAssignment_2_2_1()); }
(rule__ComputeExpression__NameAssignment_2_2_1)
{ after(grammarAccess.getComputeExpressionAccess().getNameAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectionRelation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionRelation__Group__0__Impl
	rule__SelectionRelation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionRelation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionRelationAccess().getIdentifierAssignment_0()); }
(rule__SelectionRelation__IdentifierAssignment_0)
{ after(grammarAccess.getSelectionRelationAccess().getIdentifierAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionRelation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionRelation__Group__1__Impl
	rule__SelectionRelation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionRelation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionRelationAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1()); }
	RULE_PUNC_OPEN_PARENTHESIS
{ after(grammarAccess.getSelectionRelationAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionRelation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionRelation__Group__2__Impl
	rule__SelectionRelation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionRelation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionRelationAccess().getGroup_2()); }
(rule__SelectionRelation__Group_2__0)?
{ after(grammarAccess.getSelectionRelationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionRelation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionRelation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionRelation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionRelationAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_3()); }
	RULE_PUNC_CLOSE_PARENTHESIS
{ after(grammarAccess.getSelectionRelationAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SelectionRelation__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionRelation__Group_2__0__Impl
	rule__SelectionRelation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionRelation__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionRelationAccess().getArgumentsAssignment_2_0()); }
(rule__SelectionRelation__ArgumentsAssignment_2_0)
{ after(grammarAccess.getSelectionRelationAccess().getArgumentsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionRelation__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionRelation__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionRelation__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionRelationAccess().getGroup_2_1()); }
(rule__SelectionRelation__Group_2_1__0)*
{ after(grammarAccess.getSelectionRelationAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectionRelation__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionRelation__Group_2_1__0__Impl
	rule__SelectionRelation__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionRelation__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionRelationAccess().getPUNC_COMMATerminalRuleCall_2_1_0()); }
	RULE_PUNC_COMMA
{ after(grammarAccess.getSelectionRelationAccess().getPUNC_COMMATerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionRelation__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionRelation__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionRelation__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionRelationAccess().getArgumentsAssignment_2_1_1()); }
(rule__SelectionRelation__ArgumentsAssignment_2_1_1)
{ after(grammarAccess.getSelectionRelationAccess().getArgumentsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RequiredDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RequiredDefinition__Group__0__Impl
	rule__RequiredDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RequiredDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequiredDefinitionAccess().getRequiresKeyword_0()); }

	KEYWORD_40 

{ after(grammarAccess.getRequiredDefinitionAccess().getRequiresKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RequiredDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RequiredDefinition__Group__1__Impl
	rule__RequiredDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RequiredDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequiredDefinitionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1()); }
	RULE_PUNC_OPEN_PARENTHESIS
{ after(grammarAccess.getRequiredDefinitionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RequiredDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RequiredDefinition__Group__2__Impl
	rule__RequiredDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RequiredDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequiredDefinitionAccess().getTheoremsAssignment_2()); }
(rule__RequiredDefinition__TheoremsAssignment_2)
{ after(grammarAccess.getRequiredDefinitionAccess().getTheoremsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RequiredDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RequiredDefinition__Group__3__Impl
	rule__RequiredDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RequiredDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequiredDefinitionAccess().getGroup_3()); }
(rule__RequiredDefinition__Group_3__0)*
{ after(grammarAccess.getRequiredDefinitionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RequiredDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RequiredDefinition__Group__4__Impl
	rule__RequiredDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RequiredDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequiredDefinitionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_4()); }
	RULE_PUNC_CLOSE_PARENTHESIS
{ after(grammarAccess.getRequiredDefinitionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RequiredDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RequiredDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RequiredDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequiredDefinitionAccess().getPUNC_SEMI_COLONTerminalRuleCall_5()); }
	RULE_PUNC_SEMI_COLON
{ after(grammarAccess.getRequiredDefinitionAccess().getPUNC_SEMI_COLONTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__RequiredDefinition__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RequiredDefinition__Group_3__0__Impl
	rule__RequiredDefinition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RequiredDefinition__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequiredDefinitionAccess().getAndKeyword_3_0()); }

	KEYWORD_11 

{ after(grammarAccess.getRequiredDefinitionAccess().getAndKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RequiredDefinition__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RequiredDefinition__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RequiredDefinition__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequiredDefinitionAccess().getTheoremsAssignment_3_1()); }
(rule__RequiredDefinition__TheoremsAssignment_3_1)
{ after(grammarAccess.getRequiredDefinitionAccess().getTheoremsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VerificationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerificationExpression__Group__0__Impl
	rule__VerificationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationExpressionAccess().getCheckKeyword_0()); }

	KEYWORD_29 

{ after(grammarAccess.getVerificationExpressionAccess().getCheckKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerificationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerificationExpression__Group__1__Impl
	rule__VerificationExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationExpressionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1()); }
	RULE_PUNC_OPEN_PARENTHESIS
{ after(grammarAccess.getVerificationExpressionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerificationExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerificationExpression__Group__2__Impl
	rule__VerificationExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationExpressionAccess().getE1Assignment_2()); }
(rule__VerificationExpression__E1Assignment_2)
{ after(grammarAccess.getVerificationExpressionAccess().getE1Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerificationExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerificationExpression__Group__3__Impl
	rule__VerificationExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationExpressionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_3()); }
	RULE_PUNC_CLOSE_PARENTHESIS
{ after(grammarAccess.getVerificationExpressionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerificationExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerificationExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationExpressionAccess().getPUNC_SEMI_COLONTerminalRuleCall_4()); }
	RULE_PUNC_SEMI_COLON
{ after(grammarAccess.getVerificationExpressionAccess().getPUNC_SEMI_COLONTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EvaluationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EvaluationExpression__Group__0__Impl
	rule__EvaluationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EvaluationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationExpressionAccess().getReturnKeyword_0()); }

	KEYWORD_33 

{ after(grammarAccess.getEvaluationExpressionAccess().getReturnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EvaluationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EvaluationExpression__Group__1__Impl
	rule__EvaluationExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EvaluationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationExpressionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1()); }
	RULE_PUNC_OPEN_PARENTHESIS
{ after(grammarAccess.getEvaluationExpressionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EvaluationExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EvaluationExpression__Group__2__Impl
	rule__EvaluationExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EvaluationExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationExpressionAccess().getFAssignment_2()); }
(rule__EvaluationExpression__FAssignment_2)
{ after(grammarAccess.getEvaluationExpressionAccess().getFAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EvaluationExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EvaluationExpression__Group__3__Impl
	rule__EvaluationExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EvaluationExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationExpressionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_3()); }
	RULE_PUNC_OPEN_PARENTHESIS
{ after(grammarAccess.getEvaluationExpressionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EvaluationExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EvaluationExpression__Group__4__Impl
	rule__EvaluationExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EvaluationExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationExpressionAccess().getEAssignment_4()); }
(rule__EvaluationExpression__EAssignment_4)
{ after(grammarAccess.getEvaluationExpressionAccess().getEAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EvaluationExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EvaluationExpression__Group__5__Impl
	rule__EvaluationExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__EvaluationExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationExpressionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_5()); }
	RULE_PUNC_CLOSE_PARENTHESIS
{ after(grammarAccess.getEvaluationExpressionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EvaluationExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EvaluationExpression__Group__6__Impl
	rule__EvaluationExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__EvaluationExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationExpressionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_6()); }
	RULE_PUNC_CLOSE_PARENTHESIS
{ after(grammarAccess.getEvaluationExpressionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EvaluationExpression__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EvaluationExpression__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EvaluationExpression__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationExpressionAccess().getPUNC_SEMI_COLONTerminalRuleCall_7()); }
	RULE_PUNC_SEMI_COLON
{ after(grammarAccess.getEvaluationExpressionAccess().getPUNC_SEMI_COLONTerminalRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__GenericExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericExpression__Group__0__Impl
	rule__GenericExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericExpressionAccess().getE1Assignment_0()); }
(rule__GenericExpression__E1Assignment_0)
{ after(grammarAccess.getGenericExpressionAccess().getE1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenericExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericExpressionAccess().getGroup_1()); }
(rule__GenericExpression__Group_1__0)*
{ after(grammarAccess.getGenericExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GenericExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericExpression__Group_1__0__Impl
	rule__GenericExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericExpressionAccess().getOpAssignment_1_0()); }
(rule__GenericExpression__OpAssignment_1_0)
{ after(grammarAccess.getGenericExpressionAccess().getOpAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenericExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericExpressionAccess().getE2Assignment_1_1()); }
(rule__GenericExpression__E2Assignment_1_1)
{ after(grammarAccess.getGenericExpressionAccess().getE2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TerminalGenericExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalGenericExpression__Group__0__Impl
	rule__TerminalGenericExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalGenericExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalGenericExpressionAccess().getUnaryOperatorParserRuleCall_0()); }
(	ruleUnaryOperator)?
{ after(grammarAccess.getTerminalGenericExpressionAccess().getUnaryOperatorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalGenericExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalGenericExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalGenericExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalGenericExpressionAccess().getAlternatives_1()); }
(rule__TerminalGenericExpression__Alternatives_1)
{ after(grammarAccess.getTerminalGenericExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TerminalGenericExpression__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalGenericExpression__Group_1_3__0__Impl
	rule__TerminalGenericExpression__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalGenericExpression__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalGenericExpressionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1_3_0()); }
	RULE_PUNC_OPEN_PARENTHESIS
{ after(grammarAccess.getTerminalGenericExpressionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalGenericExpression__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalGenericExpression__Group_1_3__1__Impl
	rule__TerminalGenericExpression__Group_1_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalGenericExpression__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalGenericExpressionAccess().getGenericExpressionParserRuleCall_1_3_1()); }
	ruleGenericExpression
{ after(grammarAccess.getTerminalGenericExpressionAccess().getGenericExpressionParserRuleCall_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalGenericExpression__Group_1_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalGenericExpression__Group_1_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalGenericExpression__Group_1_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalGenericExpressionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_1_3_2()); }
	RULE_PUNC_CLOSE_PARENTHESIS
{ after(grammarAccess.getTerminalGenericExpressionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_1_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SetExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetExpression__Group__0__Impl
	rule__SetExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetExpressionAccess().getE1Assignment_0()); }
(rule__SetExpression__E1Assignment_0)
{ after(grammarAccess.getSetExpressionAccess().getE1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetExpressionAccess().getGroup_1()); }
(rule__SetExpression__Group_1__0)*
{ after(grammarAccess.getSetExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SetExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetExpression__Group_1__0__Impl
	rule__SetExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetExpressionAccess().getOpAssignment_1_0()); }
(rule__SetExpression__OpAssignment_1_0)
{ after(grammarAccess.getSetExpressionAccess().getOpAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetExpressionAccess().getE2Assignment_1_1()); }
(rule__SetExpression__E2Assignment_1_1)
{ after(grammarAccess.getSetExpressionAccess().getE2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TernaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryExpression__Group__0__Impl
	rule__TernaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getIfKeyword_0()); }

	KEYWORD_3 

{ after(grammarAccess.getTernaryExpressionAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryExpression__Group__1__Impl
	rule__TernaryExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getConditionalAssignment_1()); }
(rule__TernaryExpression__ConditionalAssignment_1)
{ after(grammarAccess.getTernaryExpressionAccess().getConditionalAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryExpression__Group__2__Impl
	rule__TernaryExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getThenKeyword_2()); }

	KEYWORD_23 

{ after(grammarAccess.getTernaryExpressionAccess().getThenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryExpression__Group__3__Impl
	rule__TernaryExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getTrueValueAssignment_3()); }
(rule__TernaryExpression__TrueValueAssignment_3)
{ after(grammarAccess.getTernaryExpressionAccess().getTrueValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryExpression__Group__4__Impl
	rule__TernaryExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getElseKeyword_4()); }

	KEYWORD_22 

{ after(grammarAccess.getTernaryExpressionAccess().getElseKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getFalseValueAssignment_5()); }
(rule__TernaryExpression__FalseValueAssignment_5)
{ after(grammarAccess.getTernaryExpressionAccess().getFalseValueAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__VerificationFunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerificationFunctionCall__Group__0__Impl
	rule__VerificationFunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationFunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationFunctionCallAccess().getFAssignment_0()); }
(rule__VerificationFunctionCall__FAssignment_0)
{ after(grammarAccess.getVerificationFunctionCallAccess().getFAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerificationFunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerificationFunctionCall__Group__1__Impl
	rule__VerificationFunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationFunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationFunctionCallAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1()); }
	RULE_PUNC_OPEN_PARENTHESIS
{ after(grammarAccess.getVerificationFunctionCallAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerificationFunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerificationFunctionCall__Group__2__Impl
	rule__VerificationFunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationFunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationFunctionCallAccess().getArgumentsAssignment_2()); }
(rule__VerificationFunctionCall__ArgumentsAssignment_2)
{ after(grammarAccess.getVerificationFunctionCallAccess().getArgumentsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerificationFunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerificationFunctionCall__Group__3__Impl
	rule__VerificationFunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationFunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationFunctionCallAccess().getGroup_3()); }
(rule__VerificationFunctionCall__Group_3__0)*
{ after(grammarAccess.getVerificationFunctionCallAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerificationFunctionCall__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerificationFunctionCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationFunctionCall__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationFunctionCallAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_4()); }
	RULE_PUNC_CLOSE_PARENTHESIS
{ after(grammarAccess.getVerificationFunctionCallAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VerificationFunctionCall__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerificationFunctionCall__Group_3__0__Impl
	rule__VerificationFunctionCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationFunctionCall__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationFunctionCallAccess().getPUNC_COMMATerminalRuleCall_3_0()); }
	RULE_PUNC_COMMA
{ after(grammarAccess.getVerificationFunctionCallAccess().getPUNC_COMMATerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VerificationFunctionCall__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VerificationFunctionCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationFunctionCall__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationFunctionCallAccess().getArgumentsAssignment_3_1()); }
(rule__VerificationFunctionCall__ArgumentsAssignment_3_1)
{ after(grammarAccess.getVerificationFunctionCallAccess().getArgumentsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__TheoremsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getTheoremsTheoremParserRuleCall_0()); }
	ruleTheorem{ after(grammarAccess.getModelAccess().getTheoremsTheoremParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTheoremAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__RangeDefinitionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getRangeDefinitionRangeDefinitionParserRuleCall_2_0()); }
	ruleRangeDefinition{ after(grammarAccess.getTheoremAccess().getRangeDefinitionRangeDefinitionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__RequiredDefinitionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getRequiredDefinitionRequiredDefinitionParserRuleCall_3_0()); }
	ruleRequiredDefinition{ after(grammarAccess.getTheoremAccess().getRequiredDefinitionRequiredDefinitionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__VarDeclarationsAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getVarDeclarationsVarDeclarationParserRuleCall_4_0_0()); }
	ruleVarDeclaration{ after(grammarAccess.getTheoremAccess().getVarDeclarationsVarDeclarationParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__SetDeclarationsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getSetDeclarationsSetDeclarationParserRuleCall_4_1_0()); }
	ruleSetDeclaration{ after(grammarAccess.getTheoremAccess().getSetDeclarationsSetDeclarationParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__VerificationExpressionAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getVerificationExpressionVerificationExpressionParserRuleCall_5_0_0()); }
	ruleVerificationExpression{ after(grammarAccess.getTheoremAccess().getVerificationExpressionVerificationExpressionParserRuleCall_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__EvaluationExpressionAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getEvaluationExpressionEvaluationExpressionParserRuleCall_5_1_0()); }
	ruleEvaluationExpression{ after(grammarAccess.getTheoremAccess().getEvaluationExpressionEvaluationExpressionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Theorem__EndNameAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheoremAccess().getEndNameIDTerminalRuleCall_7_0()); }
	RULE_ID{ after(grammarAccess.getTheoremAccess().getEndNameIDTerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeDefinition__ElementAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeDefinitionAccess().getElementIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getRangeDefinitionAccess().getElementIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeDefinition__SetAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeDefinitionAccess().getSetSetExpressionParserRuleCall_3_0()); }
	ruleSetExpression{ after(grammarAccess.getRangeDefinitionAccess().getSetSetExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__IdentifierAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getIdentifierIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVarDeclarationAccess().getIdentifierIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__ExprAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getExprTerminalSelectionExpressionParserRuleCall_3_0()); }
	ruleTerminalSelectionExpression{ after(grammarAccess.getVarDeclarationAccess().getExprTerminalSelectionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetDeclaration__SetAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetDeclarationAccess().getSetIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getSetDeclarationAccess().getSetIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetDeclaration__ParamIdentifierAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetDeclarationAccess().getParamIdentifierIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getSetDeclarationAccess().getParamIdentifierIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetDeclaration__ElementBindingAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetDeclarationAccess().getElementBindingElementBindingParserRuleCall_4_0()); }
	ruleElementBinding{ after(grammarAccess.getSetDeclarationAccess().getElementBindingElementBindingParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetDeclaration__ExprAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetDeclarationAccess().getExprSelectionExpressionParserRuleCall_6_0()); }
	ruleSelectionExpression{ after(grammarAccess.getSetDeclarationAccess().getExprSelectionExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementBinding__ElementAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementBindingAccess().getElementIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getElementBindingAccess().getElementIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementBinding__SetAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementBindingAccess().getSetSetExpressionParserRuleCall_2_0()); }
	ruleSetExpression{ after(grammarAccess.getElementBindingAccess().getSetSetExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionExpression__E1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionExpressionAccess().getE1TerminalSelectionExpressionParserRuleCall_0_0()); }
	ruleTerminalSelectionExpression{ after(grammarAccess.getSelectionExpressionAccess().getE1TerminalSelectionExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionExpression__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionExpressionAccess().getOpBooleanOperatorParserRuleCall_1_0_0()); }
	ruleBooleanOperator{ after(grammarAccess.getSelectionExpressionAccess().getOpBooleanOperatorParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionExpression__E2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionExpressionAccess().getE2TerminalSelectionExpressionParserRuleCall_1_1_0()); }
	ruleTerminalSelectionExpression{ after(grammarAccess.getSelectionExpressionAccess().getE2TerminalSelectionExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeExpression__IdentifierAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComputeExpressionAccess().getIdentifierIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getComputeExpressionAccess().getIdentifierIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeExpression__NameAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComputeExpressionAccess().getNameIDTerminalRuleCall_2_1_0()); }
	RULE_ID{ after(grammarAccess.getComputeExpressionAccess().getNameIDTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComputeExpression__NameAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComputeExpressionAccess().getNameIDTerminalRuleCall_2_2_1_0()); }
	RULE_ID{ after(grammarAccess.getComputeExpressionAccess().getNameIDTerminalRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSelectionExpression__CAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalSelectionExpressionAccess().getCComputeExpressionParserRuleCall_0_0()); }
	ruleComputeExpression{ after(grammarAccess.getTerminalSelectionExpressionAccess().getCComputeExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSelectionExpression__EAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalSelectionExpressionAccess().getETerminalGenericExpressionParserRuleCall_1_0()); }
	ruleTerminalGenericExpression{ after(grammarAccess.getTerminalSelectionExpressionAccess().getETerminalGenericExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalSelectionExpression__RAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalSelectionExpressionAccess().getRSelectionRelationParserRuleCall_2_0()); }
	ruleSelectionRelation{ after(grammarAccess.getTerminalSelectionExpressionAccess().getRSelectionRelationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionRelation__IdentifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionRelationAccess().getIdentifierSelectionRelationIdentifierParserRuleCall_0_0()); }
	ruleSelectionRelationIdentifier{ after(grammarAccess.getSelectionRelationAccess().getIdentifierSelectionRelationIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionRelation__ArgumentsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionRelationAccess().getArgumentsSelectionRelationParameterParserRuleCall_2_0_0()); }
	ruleSelectionRelationParameter{ after(grammarAccess.getSelectionRelationAccess().getArgumentsSelectionRelationParameterParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionRelation__ArgumentsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionRelationAccess().getArgumentsSelectionRelationParameterParserRuleCall_2_1_1_0()); }
	ruleSelectionRelationParameter{ after(grammarAccess.getSelectionRelationAccess().getArgumentsSelectionRelationParameterParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionRelationParameter__LAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionRelationParameterAccess().getLLiteralParserRuleCall_0_0()); }
	ruleLiteral{ after(grammarAccess.getSelectionRelationParameterAccess().getLLiteralParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionRelationParameter__IdentifierAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionRelationParameterAccess().getIdentifierIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSelectionRelationParameterAccess().getIdentifierIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RequiredDefinition__TheoremsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequiredDefinitionAccess().getTheoremsIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getRequiredDefinitionAccess().getTheoremsIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RequiredDefinition__TheoremsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequiredDefinitionAccess().getTheoremsIDTerminalRuleCall_3_1_0()); }
	RULE_ID{ after(grammarAccess.getRequiredDefinitionAccess().getTheoremsIDTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationExpression__E1Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationExpressionAccess().getE1GenericExpressionParserRuleCall_2_0()); }
	ruleGenericExpression{ after(grammarAccess.getVerificationExpressionAccess().getE1GenericExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EvaluationExpression__FAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationExpressionAccess().getFAggregationFunctionIdentifierParserRuleCall_2_0()); }
	ruleAggregationFunctionIdentifier{ after(grammarAccess.getEvaluationExpressionAccess().getFAggregationFunctionIdentifierParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EvaluationExpression__EAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationExpressionAccess().getEGenericExpressionParserRuleCall_4_0()); }
	ruleGenericExpression{ after(grammarAccess.getEvaluationExpressionAccess().getEGenericExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GenericExpression__E1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericExpressionAccess().getE1TerminalGenericExpressionParserRuleCall_0_0()); }
	ruleTerminalGenericExpression{ after(grammarAccess.getGenericExpressionAccess().getE1TerminalGenericExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GenericExpression__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericExpressionAccess().getOpGenericOperatorParserRuleCall_1_0_0()); }
	ruleGenericOperator{ after(grammarAccess.getGenericExpressionAccess().getOpGenericOperatorParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GenericExpression__E2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericExpressionAccess().getE2TerminalGenericExpressionParserRuleCall_1_1_0()); }
	ruleTerminalGenericExpression{ after(grammarAccess.getGenericExpressionAccess().getE2TerminalGenericExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalGenericExpression__LiteralAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalGenericExpressionAccess().getLiteralLiteralParserRuleCall_1_0_0()); }
	ruleLiteral{ after(grammarAccess.getTerminalGenericExpressionAccess().getLiteralLiteralParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalGenericExpression__FcAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalGenericExpressionAccess().getFcVerificationFunctionCallParserRuleCall_1_1_0()); }
	ruleVerificationFunctionCall{ after(grammarAccess.getTerminalGenericExpressionAccess().getFcVerificationFunctionCallParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalGenericExpression__TeAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalGenericExpressionAccess().getTeTernaryExpressionParserRuleCall_1_2_0()); }
	ruleTernaryExpression{ after(grammarAccess.getTerminalGenericExpressionAccess().getTeTernaryExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetExpression__E1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetExpressionAccess().getE1TerminalSetExpressionParserRuleCall_0_0()); }
	ruleTerminalSetExpression{ after(grammarAccess.getSetExpressionAccess().getE1TerminalSetExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetExpression__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetExpressionAccess().getOpSetOperatorParserRuleCall_1_0_0()); }
	ruleSetOperator{ after(grammarAccess.getSetExpressionAccess().getOpSetOperatorParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetExpression__E2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetExpressionAccess().getE2TerminalSetExpressionParserRuleCall_1_1_0()); }
	ruleTerminalSetExpression{ after(grammarAccess.getSetExpressionAccess().getE2TerminalSetExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__ConditionalAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getConditionalGenericExpressionParserRuleCall_1_0()); }
	ruleGenericExpression{ after(grammarAccess.getTernaryExpressionAccess().getConditionalGenericExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__TrueValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getTrueValueGenericExpressionParserRuleCall_3_0()); }
	ruleGenericExpression{ after(grammarAccess.getTernaryExpressionAccess().getTrueValueGenericExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryExpression__FalseValueAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryExpressionAccess().getFalseValueGenericExpressionParserRuleCall_5_0()); }
	ruleGenericExpression{ after(grammarAccess.getTernaryExpressionAccess().getFalseValueGenericExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationFunctionCall__FAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationFunctionCallAccess().getFVerificationFunctionIdentifierParserRuleCall_0_0()); }
	ruleVerificationFunctionIdentifier{ after(grammarAccess.getVerificationFunctionCallAccess().getFVerificationFunctionIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationFunctionCall__ArgumentsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationFunctionCallAccess().getArgumentsVerificationFunctionParameterParserRuleCall_2_0()); }
	ruleVerificationFunctionParameter{ after(grammarAccess.getVerificationFunctionCallAccess().getArgumentsVerificationFunctionParameterParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationFunctionCall__ArgumentsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationFunctionCallAccess().getArgumentsVerificationFunctionParameterParserRuleCall_3_1_0()); }
	ruleVerificationFunctionParameter{ after(grammarAccess.getVerificationFunctionCallAccess().getArgumentsVerificationFunctionParameterParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationFunctionParameter__LAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationFunctionParameterAccess().getLLiteralParserRuleCall_0_0()); }
	ruleLiteral{ after(grammarAccess.getVerificationFunctionParameterAccess().getLLiteralParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationFunctionParameter__IdentifierAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationFunctionParameterAccess().getIdentifierIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVerificationFunctionParameterAccess().getIdentifierIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VerificationFunctionParameter__VfiAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerificationFunctionParameterAccess().getVfiVerificationFunctionCallParserRuleCall_2_0()); }
	ruleVerificationFunctionCall{ after(grammarAccess.getVerificationFunctionParameterAccess().getVfiVerificationFunctionCallParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__BAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getBBOOLEANParserRuleCall_0_0()); }
	ruleBOOLEAN{ after(grammarAccess.getLiteralAccess().getBBOOLEANParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__SAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getSSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getLiteralAccess().getSSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__NAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNNUMERICTerminalRuleCall_2_0()); }
	RULE_NUMERIC{ after(grammarAccess.getLiteralAccess().getNNUMERICTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BOOLEAN__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOOLEANAccess().getValueAlternatives_0()); }
(rule__BOOLEAN__ValueAlternatives_0)
{ after(grammarAccess.getBOOLEANAccess().getValueAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


