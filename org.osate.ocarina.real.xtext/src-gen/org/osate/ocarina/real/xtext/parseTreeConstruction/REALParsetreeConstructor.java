/*
* generated by Xtext
*/
package org.osate.ocarina.real.xtext.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.osate.ocarina.real.xtext.services.REALGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class REALParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private REALGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_TheoremsAssignment(this, this, 0, inst);
			case 1: return new Theorem_Group(this, this, 1, inst);
			case 2: return new RangeDefinition_Group(this, this, 2, inst);
			case 3: return new SetDeclaration_Group(this, this, 3, inst);
			case 4: return new ElementBinding_Group(this, this, 4, inst);
			case 5: return new SelectionExpression_Group(this, this, 5, inst);
			case 6: return new TerminalSelectionExpression_Alternatives(this, this, 6, inst);
			case 7: return new SelectionRelation_Group(this, this, 7, inst);
			case 8: return new SelectionRelationParameter_Alternatives(this, this, 8, inst);
			case 9: return new RequiredDefinition_Group(this, this, 9, inst);
			case 10: return new VerificationExpression_Group(this, this, 10, inst);
			case 11: return new EvaluationExpression_Group(this, this, 11, inst);
			case 12: return new GenericExpression_Group(this, this, 12, inst);
			case 13: return new TerminalGenericExpression_Group(this, this, 13, inst);
			case 14: return new SetExpression_Group(this, this, 14, inst);
			case 15: return new TernaryExpression_Group(this, this, 15, inst);
			case 16: return new VerificationFunctionCall_Group(this, this, 16, inst);
			case 17: return new VerificationFunctionParameter_Alternatives(this, this, 17, inst);
			case 18: return new Literal_Alternatives(this, this, 18, inst);
			case 19: return new BOOLEAN_ValueAssignment(this, this, 19, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 * 	theorems+=Theorem*;
 *
 **/

// theorems+=Theorem*
protected class Model_TheoremsAssignment extends AssignmentToken  {
	
	public Model_TheoremsAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getTheoremsAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Theorem_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("theorems",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("theorems");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTheoremRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getTheoremsTheoremParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_TheoremsAssignment(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule Model ****************/


/************ begin Rule Theorem ****************
 *
 * Theorem:
 * 	"theorem" name=ID rangeDefinition=RangeDefinition setDeclarations+=SetDeclaration*
 * 	requiredDefinition=RequiredDefinition? (verificationExpression=VerificationExpression |
 * 	evaluationExpression=EvaluationExpression) "end" endName=ID? PUNC_SEMI_COLON;
 *
 **/

// "theorem" name=ID rangeDefinition=RangeDefinition setDeclarations+=SetDeclaration*
// requiredDefinition=RequiredDefinition? (verificationExpression=VerificationExpression |
// evaluationExpression=EvaluationExpression) "end" endName=ID? PUNC_SEMI_COLON
protected class Theorem_Group extends GroupToken {
	
	public Theorem_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTheoremAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Theorem_PUNC_SEMI_COLONTerminalRuleCall_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTheoremRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "theorem"
protected class Theorem_TheoremKeyword_0 extends KeywordToken  {
	
	public Theorem_TheoremKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTheoremAccess().getTheoremKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class Theorem_NameAssignment_1 extends AssignmentToken  {
	
	public Theorem_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTheoremAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Theorem_TheoremKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTheoremAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTheoremAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// rangeDefinition=RangeDefinition
protected class Theorem_RangeDefinitionAssignment_2 extends AssignmentToken  {
	
	public Theorem_RangeDefinitionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTheoremAccess().getRangeDefinitionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RangeDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rangeDefinition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rangeDefinition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRangeDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTheoremAccess().getRangeDefinitionRangeDefinitionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Theorem_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// setDeclarations+=SetDeclaration*
protected class Theorem_SetDeclarationsAssignment_3 extends AssignmentToken  {
	
	public Theorem_SetDeclarationsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTheoremAccess().getSetDeclarationsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("setDeclarations",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("setDeclarations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSetDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTheoremAccess().getSetDeclarationsSetDeclarationParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Theorem_SetDeclarationsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Theorem_RangeDefinitionAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// requiredDefinition=RequiredDefinition?
protected class Theorem_RequiredDefinitionAssignment_4 extends AssignmentToken  {
	
	public Theorem_RequiredDefinitionAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTheoremAccess().getRequiredDefinitionAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RequiredDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("requiredDefinition",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("requiredDefinition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequiredDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTheoremAccess().getRequiredDefinitionRequiredDefinitionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Theorem_SetDeclarationsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Theorem_RangeDefinitionAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// verificationExpression=VerificationExpression | evaluationExpression=EvaluationExpression
protected class Theorem_Alternatives_5 extends AlternativesToken {

	public Theorem_Alternatives_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTheoremAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Theorem_VerificationExpressionAssignment_5_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Theorem_EvaluationExpressionAssignment_5_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// verificationExpression=VerificationExpression
protected class Theorem_VerificationExpressionAssignment_5_0 extends AssignmentToken  {
	
	public Theorem_VerificationExpressionAssignment_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTheoremAccess().getVerificationExpressionAssignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VerificationExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("verificationExpression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("verificationExpression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVerificationExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTheoremAccess().getVerificationExpressionVerificationExpressionParserRuleCall_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Theorem_RequiredDefinitionAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Theorem_SetDeclarationsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Theorem_RangeDefinitionAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// evaluationExpression=EvaluationExpression
protected class Theorem_EvaluationExpressionAssignment_5_1 extends AssignmentToken  {
	
	public Theorem_EvaluationExpressionAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTheoremAccess().getEvaluationExpressionAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EvaluationExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("evaluationExpression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("evaluationExpression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEvaluationExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTheoremAccess().getEvaluationExpressionEvaluationExpressionParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Theorem_RequiredDefinitionAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Theorem_SetDeclarationsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Theorem_RangeDefinitionAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "end"
protected class Theorem_EndKeyword_6 extends KeywordToken  {
	
	public Theorem_EndKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTheoremAccess().getEndKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Theorem_Alternatives_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// endName=ID?
protected class Theorem_EndNameAssignment_7 extends AssignmentToken  {
	
	public Theorem_EndNameAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTheoremAccess().getEndNameAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Theorem_EndKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("endName",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("endName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTheoremAccess().getEndNameIDTerminalRuleCall_7_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTheoremAccess().getEndNameIDTerminalRuleCall_7_0();
			return obj;
		}
		return null;
	}

}

// PUNC_SEMI_COLON
protected class Theorem_PUNC_SEMI_COLONTerminalRuleCall_8 extends UnassignedTextToken {

	public Theorem_PUNC_SEMI_COLONTerminalRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTheoremAccess().getPUNC_SEMI_COLONTerminalRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Theorem_EndNameAssignment_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Theorem_EndKeyword_6(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule Theorem ****************/


/************ begin Rule RangeDefinition ****************
 *
 * RangeDefinition:
 * 	"foreach" element=ID "in" set=SetExpression "do";
 *
 **/

// "foreach" element=ID "in" set=SetExpression "do"
protected class RangeDefinition_Group extends GroupToken {
	
	public RangeDefinition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRangeDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RangeDefinition_DoKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRangeDefinitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "foreach"
protected class RangeDefinition_ForeachKeyword_0 extends KeywordToken  {
	
	public RangeDefinition_ForeachKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRangeDefinitionAccess().getForeachKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// element=ID
protected class RangeDefinition_ElementAssignment_1 extends AssignmentToken  {
	
	public RangeDefinition_ElementAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRangeDefinitionAccess().getElementAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RangeDefinition_ForeachKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("element",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("element");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRangeDefinitionAccess().getElementIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRangeDefinitionAccess().getElementIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "in"
protected class RangeDefinition_InKeyword_2 extends KeywordToken  {
	
	public RangeDefinition_InKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRangeDefinitionAccess().getInKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RangeDefinition_ElementAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// set=SetExpression
protected class RangeDefinition_SetAssignment_3 extends AssignmentToken  {
	
	public RangeDefinition_SetAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRangeDefinitionAccess().getSetAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("set",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("set");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSetExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRangeDefinitionAccess().getSetSetExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RangeDefinition_InKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "do"
protected class RangeDefinition_DoKeyword_4 extends KeywordToken  {
	
	public RangeDefinition_DoKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRangeDefinitionAccess().getDoKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RangeDefinition_SetAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule RangeDefinition ****************/


/************ begin Rule SetDeclaration ****************
 *
 * SetDeclaration:
 * 	set=ID (PUNC_OPEN_PARENTHESIS paramIdentifier=ID PUNC_CLOSE_PARENTHESIS)? AFFECTATION_OPERATOR PUNC_OPEN_BRACE
 * 	elementBinding=ElementBinding "|" expr=SelectionExpression PUNC_CLOSE_BRACE PUNC_SEMI_COLON;
 *
 **/

// set=ID (PUNC_OPEN_PARENTHESIS paramIdentifier=ID PUNC_CLOSE_PARENTHESIS)? AFFECTATION_OPERATOR PUNC_OPEN_BRACE
// elementBinding=ElementBinding "|" expr=SelectionExpression PUNC_CLOSE_BRACE PUNC_SEMI_COLON
protected class SetDeclaration_Group extends GroupToken {
	
	public SetDeclaration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetDeclaration_PUNC_SEMI_COLONTerminalRuleCall_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// set=ID
protected class SetDeclaration_SetAssignment_0 extends AssignmentToken  {
	
	public SetDeclaration_SetAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetDeclarationAccess().getSetAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("set",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("set");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetDeclarationAccess().getSetIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetDeclarationAccess().getSetIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// (PUNC_OPEN_PARENTHESIS paramIdentifier=ID PUNC_CLOSE_PARENTHESIS)?
protected class SetDeclaration_Group_1 extends GroupToken {
	
	public SetDeclaration_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetDeclarationAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetDeclaration_PUNC_CLOSE_PARENTHESISTerminalRuleCall_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PUNC_OPEN_PARENTHESIS
protected class SetDeclaration_PUNC_OPEN_PARENTHESISTerminalRuleCall_1_0 extends UnassignedTextToken {

	public SetDeclaration_PUNC_OPEN_PARENTHESISTerminalRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSetDeclarationAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetDeclaration_SetAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// paramIdentifier=ID
protected class SetDeclaration_ParamIdentifierAssignment_1_1 extends AssignmentToken  {
	
	public SetDeclaration_ParamIdentifierAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetDeclarationAccess().getParamIdentifierAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetDeclaration_PUNC_OPEN_PARENTHESISTerminalRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("paramIdentifier",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("paramIdentifier");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetDeclarationAccess().getParamIdentifierIDTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetDeclarationAccess().getParamIdentifierIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// PUNC_CLOSE_PARENTHESIS
protected class SetDeclaration_PUNC_CLOSE_PARENTHESISTerminalRuleCall_1_2 extends UnassignedTextToken {

	public SetDeclaration_PUNC_CLOSE_PARENTHESISTerminalRuleCall_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSetDeclarationAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetDeclaration_ParamIdentifierAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// AFFECTATION_OPERATOR
protected class SetDeclaration_AFFECTATION_OPERATORTerminalRuleCall_2 extends UnassignedTextToken {

	public SetDeclaration_AFFECTATION_OPERATORTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSetDeclarationAccess().getAFFECTATION_OPERATORTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetDeclaration_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SetDeclaration_SetAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// PUNC_OPEN_BRACE
protected class SetDeclaration_PUNC_OPEN_BRACETerminalRuleCall_3 extends UnassignedTextToken {

	public SetDeclaration_PUNC_OPEN_BRACETerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSetDeclarationAccess().getPUNC_OPEN_BRACETerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetDeclaration_AFFECTATION_OPERATORTerminalRuleCall_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// elementBinding=ElementBinding
protected class SetDeclaration_ElementBindingAssignment_4 extends AssignmentToken  {
	
	public SetDeclaration_ElementBindingAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetDeclarationAccess().getElementBindingAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementBinding_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elementBinding",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elementBinding");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementBindingRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSetDeclarationAccess().getElementBindingElementBindingParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SetDeclaration_PUNC_OPEN_BRACETerminalRuleCall_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "|"
protected class SetDeclaration_VerticalLineKeyword_5 extends KeywordToken  {
	
	public SetDeclaration_VerticalLineKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetDeclarationAccess().getVerticalLineKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetDeclaration_ElementBindingAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expr=SelectionExpression
protected class SetDeclaration_ExprAssignment_6 extends AssignmentToken  {
	
	public SetDeclaration_ExprAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetDeclarationAccess().getExprAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectionExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSelectionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSetDeclarationAccess().getExprSelectionExpressionParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SetDeclaration_VerticalLineKeyword_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// PUNC_CLOSE_BRACE
protected class SetDeclaration_PUNC_CLOSE_BRACETerminalRuleCall_7 extends UnassignedTextToken {

	public SetDeclaration_PUNC_CLOSE_BRACETerminalRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSetDeclarationAccess().getPUNC_CLOSE_BRACETerminalRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetDeclaration_ExprAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PUNC_SEMI_COLON
protected class SetDeclaration_PUNC_SEMI_COLONTerminalRuleCall_8 extends UnassignedTextToken {

	public SetDeclaration_PUNC_SEMI_COLONTerminalRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSetDeclarationAccess().getPUNC_SEMI_COLONTerminalRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetDeclaration_PUNC_CLOSE_BRACETerminalRuleCall_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule SetDeclaration ****************/


/************ begin Rule ElementBinding ****************
 *
 * ElementBinding:
 * 	element=ID "in" set=SetExpression;
 *
 **/

// element=ID "in" set=SetExpression
protected class ElementBinding_Group extends GroupToken {
	
	public ElementBinding_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementBindingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementBinding_SetAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getElementBindingRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// element=ID
protected class ElementBinding_ElementAssignment_0 extends AssignmentToken  {
	
	public ElementBinding_ElementAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementBindingAccess().getElementAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("element",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("element");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getElementBindingAccess().getElementIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getElementBindingAccess().getElementIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "in"
protected class ElementBinding_InKeyword_1 extends KeywordToken  {
	
	public ElementBinding_InKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementBindingAccess().getInKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementBinding_ElementAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// set=SetExpression
protected class ElementBinding_SetAssignment_2 extends AssignmentToken  {
	
	public ElementBinding_SetAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementBindingAccess().getSetAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("set",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("set");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSetExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getElementBindingAccess().getSetSetExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementBinding_InKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ElementBinding ****************/


/************ begin Rule SelectionExpression ****************
 *
 * SelectionExpression:
 * 	e1=TerminalSelectionExpression (op+=BooleanOperator e2+=TerminalSelectionExpression)*;
 *
 **/

// e1=TerminalSelectionExpression (op+=BooleanOperator e2+=TerminalSelectionExpression)*
protected class SelectionExpression_Group extends GroupToken {
	
	public SelectionExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectionExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectionExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectionExpression_E1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectionExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// e1=TerminalSelectionExpression
protected class SelectionExpression_E1Assignment_0 extends AssignmentToken  {
	
	public SelectionExpression_E1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectionExpressionAccess().getE1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalSelectionExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerminalSelectionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectionExpressionAccess().getE1TerminalSelectionExpressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (op+=BooleanOperator e2+=TerminalSelectionExpression)*
protected class SelectionExpression_Group_1 extends GroupToken {
	
	public SelectionExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectionExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectionExpression_E2Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// op+=BooleanOperator
protected class SelectionExpression_OpAssignment_1_0 extends AssignmentToken  {
	
	public SelectionExpression_OpAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectionExpressionAccess().getOpAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectionExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectionExpression_E1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectionExpressionAccess().getOpBooleanOperatorParserRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSelectionExpressionAccess().getOpBooleanOperatorParserRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// e2+=TerminalSelectionExpression
protected class SelectionExpression_E2Assignment_1_1 extends AssignmentToken  {
	
	public SelectionExpression_E2Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectionExpressionAccess().getE2Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalSelectionExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerminalSelectionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectionExpressionAccess().getE2TerminalSelectionExpressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectionExpression_OpAssignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule SelectionExpression ****************/


/************ begin Rule TerminalSelectionExpression ****************
 *
 * TerminalSelectionExpression:
 * 	e=GenericExpression | r=SelectionRelation;
 *
 **/

// e=GenericExpression | r=SelectionRelation
protected class TerminalSelectionExpression_Alternatives extends AlternativesToken {

	public TerminalSelectionExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTerminalSelectionExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalSelectionExpression_EAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TerminalSelectionExpression_RAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerminalSelectionExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// e=GenericExpression
protected class TerminalSelectionExpression_EAssignment_0 extends AssignmentToken  {
	
	public TerminalSelectionExpression_EAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminalSelectionExpressionAccess().getEAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenericExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGenericExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerminalSelectionExpressionAccess().getEGenericExpressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// r=SelectionRelation
protected class TerminalSelectionExpression_RAssignment_1 extends AssignmentToken  {
	
	public TerminalSelectionExpression_RAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminalSelectionExpressionAccess().getRAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectionRelation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("r",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("r");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSelectionRelationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerminalSelectionExpressionAccess().getRSelectionRelationParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule TerminalSelectionExpression ****************/


/************ begin Rule SelectionRelation ****************
 *
 * SelectionRelation:
 * 	identifier=SelectionRelationIdentifier PUNC_OPEN_PARENTHESIS (arguments+=SelectionRelationParameter (PUNC_COMMA
 * 	arguments+=SelectionRelationParameter)*)? PUNC_CLOSE_PARENTHESIS;
 *
 **/

// identifier=SelectionRelationIdentifier PUNC_OPEN_PARENTHESIS (arguments+=SelectionRelationParameter (PUNC_COMMA
// arguments+=SelectionRelationParameter)*)? PUNC_CLOSE_PARENTHESIS
protected class SelectionRelation_Group extends GroupToken {
	
	public SelectionRelation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectionRelationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectionRelation_PUNC_CLOSE_PARENTHESISTerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectionRelationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// identifier=SelectionRelationIdentifier
protected class SelectionRelation_IdentifierAssignment_0 extends AssignmentToken  {
	
	public SelectionRelation_IdentifierAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectionRelationAccess().getIdentifierAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("identifier",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("identifier");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectionRelationAccess().getIdentifierSelectionRelationIdentifierParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSelectionRelationAccess().getIdentifierSelectionRelationIdentifierParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// PUNC_OPEN_PARENTHESIS
protected class SelectionRelation_PUNC_OPEN_PARENTHESISTerminalRuleCall_1 extends UnassignedTextToken {

	public SelectionRelation_PUNC_OPEN_PARENTHESISTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSelectionRelationAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectionRelation_IdentifierAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (arguments+=SelectionRelationParameter (PUNC_COMMA arguments+=SelectionRelationParameter)*)?
protected class SelectionRelation_Group_2 extends GroupToken {
	
	public SelectionRelation_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectionRelationAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectionRelation_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectionRelation_ArgumentsAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// arguments+=SelectionRelationParameter
protected class SelectionRelation_ArgumentsAssignment_2_0 extends AssignmentToken  {
	
	public SelectionRelation_ArgumentsAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectionRelationAccess().getArgumentsAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectionRelationParameter_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSelectionRelationParameterRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectionRelationAccess().getArgumentsSelectionRelationParameterParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectionRelation_PUNC_OPEN_PARENTHESISTerminalRuleCall_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (PUNC_COMMA arguments+=SelectionRelationParameter)*
protected class SelectionRelation_Group_2_1 extends GroupToken {
	
	public SelectionRelation_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectionRelationAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectionRelation_ArgumentsAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PUNC_COMMA
protected class SelectionRelation_PUNC_COMMATerminalRuleCall_2_1_0 extends UnassignedTextToken {

	public SelectionRelation_PUNC_COMMATerminalRuleCall_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSelectionRelationAccess().getPUNC_COMMATerminalRuleCall_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectionRelation_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectionRelation_ArgumentsAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// arguments+=SelectionRelationParameter
protected class SelectionRelation_ArgumentsAssignment_2_1_1 extends AssignmentToken  {
	
	public SelectionRelation_ArgumentsAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectionRelationAccess().getArgumentsAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectionRelationParameter_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSelectionRelationParameterRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectionRelationAccess().getArgumentsSelectionRelationParameterParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectionRelation_PUNC_COMMATerminalRuleCall_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// PUNC_CLOSE_PARENTHESIS
protected class SelectionRelation_PUNC_CLOSE_PARENTHESISTerminalRuleCall_3 extends UnassignedTextToken {

	public SelectionRelation_PUNC_CLOSE_PARENTHESISTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSelectionRelationAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectionRelation_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectionRelation_PUNC_OPEN_PARENTHESISTerminalRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SelectionRelation ****************/



/************ begin Rule SelectionRelationParameter ****************
 *
 * SelectionRelationParameter:
 * 	l=Literal | identifier=ID;
 *
 **/

// l=Literal | identifier=ID
protected class SelectionRelationParameter_Alternatives extends AlternativesToken {

	public SelectionRelationParameter_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSelectionRelationParameterAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectionRelationParameter_LAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectionRelationParameter_IdentifierAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectionRelationParameterRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// l=Literal
protected class SelectionRelationParameter_LAssignment_0 extends AssignmentToken  {
	
	public SelectionRelationParameter_LAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectionRelationParameterAccess().getLAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Literal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("l",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("l");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectionRelationParameterAccess().getLLiteralParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// identifier=ID
protected class SelectionRelationParameter_IdentifierAssignment_1 extends AssignmentToken  {
	
	public SelectionRelationParameter_IdentifierAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectionRelationParameterAccess().getIdentifierAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("identifier",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("identifier");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectionRelationParameterAccess().getIdentifierIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSelectionRelationParameterAccess().getIdentifierIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SelectionRelationParameter ****************/


/************ begin Rule RequiredDefinition ****************
 *
 * RequiredDefinition:
 * 	"requires" PUNC_OPEN_PARENTHESIS theorems+=ID ("and" theorems+=ID)* PUNC_CLOSE_PARENTHESIS PUNC_SEMI_COLON;
 *
 **/

// "requires" PUNC_OPEN_PARENTHESIS theorems+=ID ("and" theorems+=ID)* PUNC_CLOSE_PARENTHESIS PUNC_SEMI_COLON
protected class RequiredDefinition_Group extends GroupToken {
	
	public RequiredDefinition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRequiredDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RequiredDefinition_PUNC_SEMI_COLONTerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRequiredDefinitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "requires"
protected class RequiredDefinition_RequiresKeyword_0 extends KeywordToken  {
	
	public RequiredDefinition_RequiresKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRequiredDefinitionAccess().getRequiresKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// PUNC_OPEN_PARENTHESIS
protected class RequiredDefinition_PUNC_OPEN_PARENTHESISTerminalRuleCall_1 extends UnassignedTextToken {

	public RequiredDefinition_PUNC_OPEN_PARENTHESISTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRequiredDefinitionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RequiredDefinition_RequiresKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// theorems+=ID
protected class RequiredDefinition_TheoremsAssignment_2 extends AssignmentToken  {
	
	public RequiredDefinition_TheoremsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredDefinitionAccess().getTheoremsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RequiredDefinition_PUNC_OPEN_PARENTHESISTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("theorems",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("theorems");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRequiredDefinitionAccess().getTheoremsIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRequiredDefinitionAccess().getTheoremsIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("and" theorems+=ID)*
protected class RequiredDefinition_Group_3 extends GroupToken {
	
	public RequiredDefinition_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRequiredDefinitionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RequiredDefinition_TheoremsAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "and"
protected class RequiredDefinition_AndKeyword_3_0 extends KeywordToken  {
	
	public RequiredDefinition_AndKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRequiredDefinitionAccess().getAndKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RequiredDefinition_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RequiredDefinition_TheoremsAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// theorems+=ID
protected class RequiredDefinition_TheoremsAssignment_3_1 extends AssignmentToken  {
	
	public RequiredDefinition_TheoremsAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRequiredDefinitionAccess().getTheoremsAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RequiredDefinition_AndKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("theorems",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("theorems");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRequiredDefinitionAccess().getTheoremsIDTerminalRuleCall_3_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRequiredDefinitionAccess().getTheoremsIDTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// PUNC_CLOSE_PARENTHESIS
protected class RequiredDefinition_PUNC_CLOSE_PARENTHESISTerminalRuleCall_4 extends UnassignedTextToken {

	public RequiredDefinition_PUNC_CLOSE_PARENTHESISTerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRequiredDefinitionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RequiredDefinition_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RequiredDefinition_TheoremsAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// PUNC_SEMI_COLON
protected class RequiredDefinition_PUNC_SEMI_COLONTerminalRuleCall_5 extends UnassignedTextToken {

	public RequiredDefinition_PUNC_SEMI_COLONTerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRequiredDefinitionAccess().getPUNC_SEMI_COLONTerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RequiredDefinition_PUNC_CLOSE_PARENTHESISTerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule RequiredDefinition ****************/


/************ begin Rule VerificationExpression ****************
 *
 * // Should have verification sub expression but that causes problems with parsing currently
 * VerificationExpression:
 * 	"check" PUNC_OPEN_PARENTHESIS e1=GenericExpression PUNC_CLOSE_PARENTHESIS PUNC_SEMI_COLON;
 *
 **/

// "check" PUNC_OPEN_PARENTHESIS e1=GenericExpression PUNC_CLOSE_PARENTHESIS PUNC_SEMI_COLON
protected class VerificationExpression_Group extends GroupToken {
	
	public VerificationExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVerificationExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VerificationExpression_PUNC_SEMI_COLONTerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVerificationExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "check"
protected class VerificationExpression_CheckKeyword_0 extends KeywordToken  {
	
	public VerificationExpression_CheckKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVerificationExpressionAccess().getCheckKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// PUNC_OPEN_PARENTHESIS
protected class VerificationExpression_PUNC_OPEN_PARENTHESISTerminalRuleCall_1 extends UnassignedTextToken {

	public VerificationExpression_PUNC_OPEN_PARENTHESISTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getVerificationExpressionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VerificationExpression_CheckKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// e1=GenericExpression
protected class VerificationExpression_E1Assignment_2 extends AssignmentToken  {
	
	public VerificationExpression_E1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVerificationExpressionAccess().getE1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenericExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGenericExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVerificationExpressionAccess().getE1GenericExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VerificationExpression_PUNC_OPEN_PARENTHESISTerminalRuleCall_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// PUNC_CLOSE_PARENTHESIS
protected class VerificationExpression_PUNC_CLOSE_PARENTHESISTerminalRuleCall_3 extends UnassignedTextToken {

	public VerificationExpression_PUNC_CLOSE_PARENTHESISTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getVerificationExpressionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VerificationExpression_E1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PUNC_SEMI_COLON
protected class VerificationExpression_PUNC_SEMI_COLONTerminalRuleCall_4 extends UnassignedTextToken {

	public VerificationExpression_PUNC_SEMI_COLONTerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getVerificationExpressionAccess().getPUNC_SEMI_COLONTerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VerificationExpression_PUNC_CLOSE_PARENTHESISTerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule VerificationExpression ****************/


/************ begin Rule EvaluationExpression ****************
 *
 * EvaluationExpression:
 * 	"return" PUNC_OPEN_PARENTHESIS f=AggregationFunctionIdentifier PUNC_OPEN_PARENTHESIS e=GenericExpression
 * 	PUNC_CLOSE_PARENTHESIS PUNC_CLOSE_PARENTHESIS PUNC_SEMI_COLON;
 *
 **/

// "return" PUNC_OPEN_PARENTHESIS f=AggregationFunctionIdentifier PUNC_OPEN_PARENTHESIS e=GenericExpression
// PUNC_CLOSE_PARENTHESIS PUNC_CLOSE_PARENTHESIS PUNC_SEMI_COLON
protected class EvaluationExpression_Group extends GroupToken {
	
	public EvaluationExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEvaluationExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EvaluationExpression_PUNC_SEMI_COLONTerminalRuleCall_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEvaluationExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "return"
protected class EvaluationExpression_ReturnKeyword_0 extends KeywordToken  {
	
	public EvaluationExpression_ReturnKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEvaluationExpressionAccess().getReturnKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// PUNC_OPEN_PARENTHESIS
protected class EvaluationExpression_PUNC_OPEN_PARENTHESISTerminalRuleCall_1 extends UnassignedTextToken {

	public EvaluationExpression_PUNC_OPEN_PARENTHESISTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEvaluationExpressionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EvaluationExpression_ReturnKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// f=AggregationFunctionIdentifier
protected class EvaluationExpression_FAssignment_2 extends AssignmentToken  {
	
	public EvaluationExpression_FAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEvaluationExpressionAccess().getFAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EvaluationExpression_PUNC_OPEN_PARENTHESISTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("f",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("f");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEvaluationExpressionAccess().getFAggregationFunctionIdentifierParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getEvaluationExpressionAccess().getFAggregationFunctionIdentifierParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// PUNC_OPEN_PARENTHESIS
protected class EvaluationExpression_PUNC_OPEN_PARENTHESISTerminalRuleCall_3 extends UnassignedTextToken {

	public EvaluationExpression_PUNC_OPEN_PARENTHESISTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEvaluationExpressionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EvaluationExpression_FAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// e=GenericExpression
protected class EvaluationExpression_EAssignment_4 extends AssignmentToken  {
	
	public EvaluationExpression_EAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEvaluationExpressionAccess().getEAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenericExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGenericExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEvaluationExpressionAccess().getEGenericExpressionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EvaluationExpression_PUNC_OPEN_PARENTHESISTerminalRuleCall_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// PUNC_CLOSE_PARENTHESIS
protected class EvaluationExpression_PUNC_CLOSE_PARENTHESISTerminalRuleCall_5 extends UnassignedTextToken {

	public EvaluationExpression_PUNC_CLOSE_PARENTHESISTerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEvaluationExpressionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EvaluationExpression_EAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PUNC_CLOSE_PARENTHESIS
protected class EvaluationExpression_PUNC_CLOSE_PARENTHESISTerminalRuleCall_6 extends UnassignedTextToken {

	public EvaluationExpression_PUNC_CLOSE_PARENTHESISTerminalRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEvaluationExpressionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EvaluationExpression_PUNC_CLOSE_PARENTHESISTerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PUNC_SEMI_COLON
protected class EvaluationExpression_PUNC_SEMI_COLONTerminalRuleCall_7 extends UnassignedTextToken {

	public EvaluationExpression_PUNC_SEMI_COLONTerminalRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEvaluationExpressionAccess().getPUNC_SEMI_COLONTerminalRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EvaluationExpression_PUNC_CLOSE_PARENTHESISTerminalRuleCall_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule EvaluationExpression ****************/


/************ begin Rule GenericExpression ****************
 *
 * GenericExpression:
 * 	e1=TerminalGenericExpression (op+=GenericOperator e2+=TerminalGenericExpression)*;
 *
 **/

// e1=TerminalGenericExpression (op+=GenericOperator e2+=TerminalGenericExpression)*
protected class GenericExpression_Group extends GroupToken {
	
	public GenericExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGenericExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenericExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new GenericExpression_E1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGenericExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// e1=TerminalGenericExpression
protected class GenericExpression_E1Assignment_0 extends AssignmentToken  {
	
	public GenericExpression_E1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGenericExpressionAccess().getE1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalGenericExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerminalGenericExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGenericExpressionAccess().getE1TerminalGenericExpressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (op+=GenericOperator e2+=TerminalGenericExpression)*
protected class GenericExpression_Group_1 extends GroupToken {
	
	public GenericExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGenericExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenericExpression_E2Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// op+=GenericOperator
protected class GenericExpression_OpAssignment_1_0 extends AssignmentToken  {
	
	public GenericExpression_OpAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGenericExpressionAccess().getOpAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenericExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new GenericExpression_E1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getGenericExpressionAccess().getOpGenericOperatorParserRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getGenericExpressionAccess().getOpGenericOperatorParserRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// e2+=TerminalGenericExpression
protected class GenericExpression_E2Assignment_1_1 extends AssignmentToken  {
	
	public GenericExpression_E2Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGenericExpressionAccess().getE2Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalGenericExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerminalGenericExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGenericExpressionAccess().getE2TerminalGenericExpressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GenericExpression_OpAssignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule GenericExpression ****************/


/************ begin Rule TerminalGenericExpression ****************
 *
 * TerminalGenericExpression:
 * 	UnaryOperator? (literal=Literal | fc=VerificationFunctionCall | te=TernaryExpression | PUNC_OPEN_PARENTHESIS
 * 	GenericExpression PUNC_CLOSE_PARENTHESIS);
 *
 **/

// UnaryOperator? (literal=Literal | fc=VerificationFunctionCall | te=TernaryExpression | PUNC_OPEN_PARENTHESIS
// GenericExpression PUNC_CLOSE_PARENTHESIS)
protected class TerminalGenericExpression_Group extends GroupToken {
	
	public TerminalGenericExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerminalGenericExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalGenericExpression_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGenericExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerminalGenericExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// literal=Literal | fc=VerificationFunctionCall | te=TernaryExpression | PUNC_OPEN_PARENTHESIS GenericExpression
// PUNC_CLOSE_PARENTHESIS
protected class TerminalGenericExpression_Alternatives_1 extends AlternativesToken {

	public TerminalGenericExpression_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTerminalGenericExpressionAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalGenericExpression_LiteralAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TerminalGenericExpression_FcAssignment_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TerminalGenericExpression_TeAssignment_1_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new TerminalGenericExpression_Group_1_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// literal=Literal
protected class TerminalGenericExpression_LiteralAssignment_1_0 extends AssignmentToken  {
	
	public TerminalGenericExpression_LiteralAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminalGenericExpressionAccess().getLiteralAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Literal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerminalGenericExpressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("literal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("literal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerminalGenericExpressionAccess().getLiteralLiteralParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// fc=VerificationFunctionCall
protected class TerminalGenericExpression_FcAssignment_1_1 extends AssignmentToken  {
	
	public TerminalGenericExpression_FcAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminalGenericExpressionAccess().getFcAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VerificationFunctionCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerminalGenericExpressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("fc",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("fc");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVerificationFunctionCallRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerminalGenericExpressionAccess().getFcVerificationFunctionCallParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// te=TernaryExpression
protected class TerminalGenericExpression_TeAssignment_1_2 extends AssignmentToken  {
	
	public TerminalGenericExpression_TeAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminalGenericExpressionAccess().getTeAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TernaryExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerminalGenericExpressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("te",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("te");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTernaryExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerminalGenericExpressionAccess().getTeTernaryExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// PUNC_OPEN_PARENTHESIS GenericExpression PUNC_CLOSE_PARENTHESIS
protected class TerminalGenericExpression_Group_1_3 extends GroupToken {
	
	public TerminalGenericExpression_Group_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerminalGenericExpressionAccess().getGroup_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalGenericExpression_PUNC_CLOSE_PARENTHESISTerminalRuleCall_1_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGenericExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// PUNC_OPEN_PARENTHESIS
protected class TerminalGenericExpression_PUNC_OPEN_PARENTHESISTerminalRuleCall_1_3_0 extends UnassignedTextToken {

	public TerminalGenericExpression_PUNC_OPEN_PARENTHESISTerminalRuleCall_1_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerminalGenericExpressionAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// GenericExpression
protected class TerminalGenericExpression_GenericExpressionParserRuleCall_1_3_1 extends RuleCallToken {
	
	public TerminalGenericExpression_GenericExpressionParserRuleCall_1_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerminalGenericExpressionAccess().getGenericExpressionParserRuleCall_1_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenericExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(GenericExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalGenericExpression_PUNC_OPEN_PARENTHESISTerminalRuleCall_1_3_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// PUNC_CLOSE_PARENTHESIS
protected class TerminalGenericExpression_PUNC_CLOSE_PARENTHESISTerminalRuleCall_1_3_2 extends UnassignedTextToken {

	public TerminalGenericExpression_PUNC_CLOSE_PARENTHESISTerminalRuleCall_1_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerminalGenericExpressionAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_1_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalGenericExpression_GenericExpressionParserRuleCall_1_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}




/************ end Rule TerminalGenericExpression ****************/


/************ begin Rule SetExpression ****************
 *
 * SetExpression:
 * 	e1=TerminalSetExpression (op+=SetOperator e2+=TerminalSetExpression)*;
 *
 **/

// e1=TerminalSetExpression (op+=SetOperator e2+=TerminalSetExpression)*
protected class SetExpression_Group extends GroupToken {
	
	public SetExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SetExpression_E1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// e1=TerminalSetExpression
protected class SetExpression_E1Assignment_0 extends AssignmentToken  {
	
	public SetExpression_E1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getE1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetExpressionAccess().getE1TerminalSetExpressionParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSetExpressionAccess().getE1TerminalSetExpressionParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// (op+=SetOperator e2+=TerminalSetExpression)*
protected class SetExpression_Group_1 extends GroupToken {
	
	public SetExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetExpression_E2Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// op+=SetOperator
protected class SetExpression_OpAssignment_1_0 extends AssignmentToken  {
	
	public SetExpression_OpAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getOpAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SetExpression_E1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetExpressionAccess().getOpSetOperatorParserRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSetExpressionAccess().getOpSetOperatorParserRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// e2+=TerminalSetExpression
protected class SetExpression_E2Assignment_1_1 extends AssignmentToken  {
	
	public SetExpression_E2Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetExpressionAccess().getE2Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetExpression_OpAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetExpressionAccess().getE2TerminalSetExpressionParserRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSetExpressionAccess().getE2TerminalSetExpressionParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule SetExpression ****************/



/************ begin Rule TernaryExpression ****************
 *
 * TernaryExpression:
 * 	"if" conditional=GenericExpression "then" trueValue=GenericExpression "else" falseValue=GenericExpression;
 *
 **/

// "if" conditional=GenericExpression "then" trueValue=GenericExpression "else" falseValue=GenericExpression
protected class TernaryExpression_Group extends GroupToken {
	
	public TernaryExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTernaryExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TernaryExpression_FalseValueAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTernaryExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "if"
protected class TernaryExpression_IfKeyword_0 extends KeywordToken  {
	
	public TernaryExpression_IfKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTernaryExpressionAccess().getIfKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// conditional=GenericExpression
protected class TernaryExpression_ConditionalAssignment_1 extends AssignmentToken  {
	
	public TernaryExpression_ConditionalAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTernaryExpressionAccess().getConditionalAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenericExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("conditional",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("conditional");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGenericExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTernaryExpressionAccess().getConditionalGenericExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TernaryExpression_IfKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "then"
protected class TernaryExpression_ThenKeyword_2 extends KeywordToken  {
	
	public TernaryExpression_ThenKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTernaryExpressionAccess().getThenKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TernaryExpression_ConditionalAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// trueValue=GenericExpression
protected class TernaryExpression_TrueValueAssignment_3 extends AssignmentToken  {
	
	public TernaryExpression_TrueValueAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTernaryExpressionAccess().getTrueValueAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenericExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("trueValue",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("trueValue");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGenericExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTernaryExpressionAccess().getTrueValueGenericExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TernaryExpression_ThenKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "else"
protected class TernaryExpression_ElseKeyword_4 extends KeywordToken  {
	
	public TernaryExpression_ElseKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTernaryExpressionAccess().getElseKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TernaryExpression_TrueValueAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// falseValue=GenericExpression
protected class TernaryExpression_FalseValueAssignment_5 extends AssignmentToken  {
	
	public TernaryExpression_FalseValueAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTernaryExpressionAccess().getFalseValueAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenericExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("falseValue",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("falseValue");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGenericExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTernaryExpressionAccess().getFalseValueGenericExpressionParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TernaryExpression_ElseKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule TernaryExpression ****************/


/************ begin Rule VerificationFunctionCall ****************
 *
 * VerificationFunctionCall:
 * 	f=VerificationFunctionIdentifier PUNC_OPEN_PARENTHESIS arguments+=VerificationFunctionParameter (PUNC_COMMA
 * 	arguments+=VerificationFunctionParameter)* PUNC_CLOSE_PARENTHESIS;
 *
 **/

// f=VerificationFunctionIdentifier PUNC_OPEN_PARENTHESIS arguments+=VerificationFunctionParameter (PUNC_COMMA
// arguments+=VerificationFunctionParameter)* PUNC_CLOSE_PARENTHESIS
protected class VerificationFunctionCall_Group extends GroupToken {
	
	public VerificationFunctionCall_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVerificationFunctionCallAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VerificationFunctionCall_PUNC_CLOSE_PARENTHESISTerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVerificationFunctionCallRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// f=VerificationFunctionIdentifier
protected class VerificationFunctionCall_FAssignment_0 extends AssignmentToken  {
	
	public VerificationFunctionCall_FAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVerificationFunctionCallAccess().getFAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("f",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("f");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getVerificationFunctionCallAccess().getFVerificationFunctionIdentifierParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getVerificationFunctionCallAccess().getFVerificationFunctionIdentifierParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// PUNC_OPEN_PARENTHESIS
protected class VerificationFunctionCall_PUNC_OPEN_PARENTHESISTerminalRuleCall_1 extends UnassignedTextToken {

	public VerificationFunctionCall_PUNC_OPEN_PARENTHESISTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getVerificationFunctionCallAccess().getPUNC_OPEN_PARENTHESISTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VerificationFunctionCall_FAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// arguments+=VerificationFunctionParameter
protected class VerificationFunctionCall_ArgumentsAssignment_2 extends AssignmentToken  {
	
	public VerificationFunctionCall_ArgumentsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVerificationFunctionCallAccess().getArgumentsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VerificationFunctionParameter_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVerificationFunctionParameterRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVerificationFunctionCallAccess().getArgumentsVerificationFunctionParameterParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VerificationFunctionCall_PUNC_OPEN_PARENTHESISTerminalRuleCall_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (PUNC_COMMA arguments+=VerificationFunctionParameter)*
protected class VerificationFunctionCall_Group_3 extends GroupToken {
	
	public VerificationFunctionCall_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVerificationFunctionCallAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VerificationFunctionCall_ArgumentsAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PUNC_COMMA
protected class VerificationFunctionCall_PUNC_COMMATerminalRuleCall_3_0 extends UnassignedTextToken {

	public VerificationFunctionCall_PUNC_COMMATerminalRuleCall_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getVerificationFunctionCallAccess().getPUNC_COMMATerminalRuleCall_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VerificationFunctionCall_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VerificationFunctionCall_ArgumentsAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// arguments+=VerificationFunctionParameter
protected class VerificationFunctionCall_ArgumentsAssignment_3_1 extends AssignmentToken  {
	
	public VerificationFunctionCall_ArgumentsAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVerificationFunctionCallAccess().getArgumentsAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VerificationFunctionParameter_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVerificationFunctionParameterRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVerificationFunctionCallAccess().getArgumentsVerificationFunctionParameterParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VerificationFunctionCall_PUNC_COMMATerminalRuleCall_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// PUNC_CLOSE_PARENTHESIS
protected class VerificationFunctionCall_PUNC_CLOSE_PARENTHESISTerminalRuleCall_4 extends UnassignedTextToken {

	public VerificationFunctionCall_PUNC_CLOSE_PARENTHESISTerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getVerificationFunctionCallAccess().getPUNC_CLOSE_PARENTHESISTerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VerificationFunctionCall_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VerificationFunctionCall_ArgumentsAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule VerificationFunctionCall ****************/


/************ begin Rule VerificationFunctionParameter ****************
 *
 * VerificationFunctionParameter:
 * 	l=Literal | identifier=ID | vfi=VerificationFunctionCall;
 *
 **/

// l=Literal | identifier=ID | vfi=VerificationFunctionCall
protected class VerificationFunctionParameter_Alternatives extends AlternativesToken {

	public VerificationFunctionParameter_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getVerificationFunctionParameterAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VerificationFunctionParameter_LAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VerificationFunctionParameter_IdentifierAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new VerificationFunctionParameter_VfiAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVerificationFunctionParameterRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// l=Literal
protected class VerificationFunctionParameter_LAssignment_0 extends AssignmentToken  {
	
	public VerificationFunctionParameter_LAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVerificationFunctionParameterAccess().getLAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Literal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("l",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("l");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVerificationFunctionParameterAccess().getLLiteralParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// identifier=ID
protected class VerificationFunctionParameter_IdentifierAssignment_1 extends AssignmentToken  {
	
	public VerificationFunctionParameter_IdentifierAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVerificationFunctionParameterAccess().getIdentifierAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("identifier",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("identifier");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getVerificationFunctionParameterAccess().getIdentifierIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getVerificationFunctionParameterAccess().getIdentifierIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// vfi=VerificationFunctionCall
protected class VerificationFunctionParameter_VfiAssignment_2 extends AssignmentToken  {
	
	public VerificationFunctionParameter_VfiAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVerificationFunctionParameterAccess().getVfiAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VerificationFunctionCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("vfi",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("vfi");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVerificationFunctionCallRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVerificationFunctionParameterAccess().getVfiVerificationFunctionCallParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule VerificationFunctionParameter ****************/





/************ begin Rule Literal ****************
 *
 * // TODO: String literal syntax...
 * // TODO: Numeric literal snytax
 * Literal:
 * 	b=BOOLEAN | s=STRING | n=NUMERIC;
 *
 **/

// b=BOOLEAN | s=STRING | n=NUMERIC
protected class Literal_Alternatives extends AlternativesToken {

	public Literal_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Literal_BAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Literal_SAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Literal_NAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// b=BOOLEAN
protected class Literal_BAssignment_0 extends AssignmentToken  {
	
	public Literal_BAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralAccess().getBAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BOOLEAN_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("b",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("b");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBOOLEANRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLiteralAccess().getBBOOLEANParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// s=STRING
protected class Literal_SAssignment_1 extends AssignmentToken  {
	
	public Literal_SAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralAccess().getSAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("s",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("s");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralAccess().getSSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLiteralAccess().getSSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// n=NUMERIC
protected class Literal_NAssignment_2 extends AssignmentToken  {
	
	public Literal_NAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralAccess().getNAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("n",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("n");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralAccess().getNNUMERICTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLiteralAccess().getNNUMERICTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Literal ****************/


/************ begin Rule BOOLEAN ****************
 *
 * BOOLEAN:
 * 	value=("true" | "false");
 *
 **/

// value=("true" | "false")
protected class BOOLEAN_ValueAssignment extends AssignmentToken  {
	
	public BOOLEAN_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBOOLEANAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBOOLEANRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getBOOLEANAccess().getValueTrueKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBOOLEANAccess().getValueTrueKeyword_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getBOOLEANAccess().getValueFalseKeyword_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBOOLEANAccess().getValueFalseKeyword_0_1();
			return obj;
		}
		return null;
	}

}

/************ end Rule BOOLEAN ****************/






}
