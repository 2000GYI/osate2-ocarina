/*
* generated by Xtext
*/

package org.osate.ocarina.real.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class REALGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cTheoremsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTheoremsTheoremParserRuleCall_0 = (RuleCall)cTheoremsAssignment.eContents().get(0);
		
		//Model:
		//	theorems+=Theorem*;
		public ParserRule getRule() { return rule; }

		//theorems+=Theorem*
		public Assignment getTheoremsAssignment() { return cTheoremsAssignment; }

		//Theorem
		public RuleCall getTheoremsTheoremParserRuleCall_0() { return cTheoremsTheoremParserRuleCall_0; }
	}

	public class TheoremElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Theorem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheoremKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRangeDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeDefinitionRangeDefinitionParserRuleCall_2_0 = (RuleCall)cRangeDefinitionAssignment_2.eContents().get(0);
		private final Assignment cRequiredDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRequiredDefinitionRequiredDefinitionParserRuleCall_3_0 = (RuleCall)cRequiredDefinitionAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cVarDeclarationsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cVarDeclarationsVarDeclarationParserRuleCall_4_0_0 = (RuleCall)cVarDeclarationsAssignment_4_0.eContents().get(0);
		private final Assignment cSetDeclarationsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cSetDeclarationsSetDeclarationParserRuleCall_4_1_0 = (RuleCall)cSetDeclarationsAssignment_4_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cVerificationExpressionAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cVerificationExpressionVerificationExpressionParserRuleCall_5_0_0 = (RuleCall)cVerificationExpressionAssignment_5_0.eContents().get(0);
		private final Assignment cEvaluationExpressionAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cEvaluationExpressionEvaluationExpressionParserRuleCall_5_1_0 = (RuleCall)cEvaluationExpressionAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEndNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEndNameIDTerminalRuleCall_7_0 = (RuleCall)cEndNameAssignment_7.eContents().get(0);
		private final RuleCall cPUNC_SEMI_COLONTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//Theorem:
		//	"theorem" name=ID rangeDefinition=RangeDefinition requiredDefinition=RequiredDefinition?
		//	(varDeclarations+=VarDeclaration | setDeclarations+=SetDeclaration)* (verificationExpression=VerificationExpression |
		//	evaluationExpression=EvaluationExpression) "end" endName=ID? PUNC_SEMI_COLON;
		public ParserRule getRule() { return rule; }

		//"theorem" name=ID rangeDefinition=RangeDefinition requiredDefinition=RequiredDefinition?
		//(varDeclarations+=VarDeclaration | setDeclarations+=SetDeclaration)* (verificationExpression=VerificationExpression |
		//evaluationExpression=EvaluationExpression) "end" endName=ID? PUNC_SEMI_COLON
		public Group getGroup() { return cGroup; }

		//"theorem"
		public Keyword getTheoremKeyword_0() { return cTheoremKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//rangeDefinition=RangeDefinition
		public Assignment getRangeDefinitionAssignment_2() { return cRangeDefinitionAssignment_2; }

		//RangeDefinition
		public RuleCall getRangeDefinitionRangeDefinitionParserRuleCall_2_0() { return cRangeDefinitionRangeDefinitionParserRuleCall_2_0; }

		//requiredDefinition=RequiredDefinition?
		public Assignment getRequiredDefinitionAssignment_3() { return cRequiredDefinitionAssignment_3; }

		//RequiredDefinition
		public RuleCall getRequiredDefinitionRequiredDefinitionParserRuleCall_3_0() { return cRequiredDefinitionRequiredDefinitionParserRuleCall_3_0; }

		//(varDeclarations+=VarDeclaration | setDeclarations+=SetDeclaration)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//varDeclarations+=VarDeclaration
		public Assignment getVarDeclarationsAssignment_4_0() { return cVarDeclarationsAssignment_4_0; }

		//VarDeclaration
		public RuleCall getVarDeclarationsVarDeclarationParserRuleCall_4_0_0() { return cVarDeclarationsVarDeclarationParserRuleCall_4_0_0; }

		//setDeclarations+=SetDeclaration
		public Assignment getSetDeclarationsAssignment_4_1() { return cSetDeclarationsAssignment_4_1; }

		//SetDeclaration
		public RuleCall getSetDeclarationsSetDeclarationParserRuleCall_4_1_0() { return cSetDeclarationsSetDeclarationParserRuleCall_4_1_0; }

		//verificationExpression=VerificationExpression | evaluationExpression=EvaluationExpression
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//verificationExpression=VerificationExpression
		public Assignment getVerificationExpressionAssignment_5_0() { return cVerificationExpressionAssignment_5_0; }

		//VerificationExpression
		public RuleCall getVerificationExpressionVerificationExpressionParserRuleCall_5_0_0() { return cVerificationExpressionVerificationExpressionParserRuleCall_5_0_0; }

		//evaluationExpression=EvaluationExpression
		public Assignment getEvaluationExpressionAssignment_5_1() { return cEvaluationExpressionAssignment_5_1; }

		//EvaluationExpression
		public RuleCall getEvaluationExpressionEvaluationExpressionParserRuleCall_5_1_0() { return cEvaluationExpressionEvaluationExpressionParserRuleCall_5_1_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//endName=ID?
		public Assignment getEndNameAssignment_7() { return cEndNameAssignment_7; }

		//ID
		public RuleCall getEndNameIDTerminalRuleCall_7_0() { return cEndNameIDTerminalRuleCall_7_0; }

		//PUNC_SEMI_COLON
		public RuleCall getPUNC_SEMI_COLONTerminalRuleCall_8() { return cPUNC_SEMI_COLONTerminalRuleCall_8; }
	}

	public class RangeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RangeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementIDTerminalRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSetSetExpressionParserRuleCall_3_0 = (RuleCall)cSetAssignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RangeDefinition:
		//	"foreach" element=ID "in" set=SetExpression "do";
		public ParserRule getRule() { return rule; }

		//"foreach" element=ID "in" set=SetExpression "do"
		public Group getGroup() { return cGroup; }

		//"foreach"
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }

		//element=ID
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }

		//ID
		public RuleCall getElementIDTerminalRuleCall_1_0() { return cElementIDTerminalRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//set=SetExpression
		public Assignment getSetAssignment_3() { return cSetAssignment_3; }

		//SetExpression
		public RuleCall getSetSetExpressionParserRuleCall_3_0() { return cSetSetExpressionParserRuleCall_3_0; }

		//"do"
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
	}

	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final RuleCall cAFFECTATION_OPERATORTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprTerminalSelectionExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final RuleCall cPUNC_SEMI_COLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//VarDeclaration:
		//	"var" identifier=ID AFFECTATION_OPERATOR expr=TerminalSelectionExpression PUNC_SEMI_COLON;
		public ParserRule getRule() { return rule; }

		//"var" identifier=ID AFFECTATION_OPERATOR expr=TerminalSelectionExpression PUNC_SEMI_COLON
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }

		//AFFECTATION_OPERATOR
		public RuleCall getAFFECTATION_OPERATORTerminalRuleCall_2() { return cAFFECTATION_OPERATORTerminalRuleCall_2; }

		//expr=TerminalSelectionExpression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//TerminalSelectionExpression
		public RuleCall getExprTerminalSelectionExpressionParserRuleCall_3_0() { return cExprTerminalSelectionExpressionParserRuleCall_3_0; }

		//PUNC_SEMI_COLON
		public RuleCall getPUNC_SEMI_COLONTerminalRuleCall_4() { return cPUNC_SEMI_COLONTerminalRuleCall_4; }
	}

	public class SetDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSetIDTerminalRuleCall_0_0 = (RuleCall)cSetAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cPUNC_OPEN_PARENTHESISTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cParamIdentifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamIdentifierIDTerminalRuleCall_1_1_0 = (RuleCall)cParamIdentifierAssignment_1_1.eContents().get(0);
		private final RuleCall cPUNC_CLOSE_PARENTHESISTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cAFFECTATION_OPERATORTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cPUNC_OPEN_BRACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cElementBindingAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementBindingElementBindingParserRuleCall_4_0 = (RuleCall)cElementBindingAssignment_4.eContents().get(0);
		private final Keyword cVerticalLineKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExprSelectionExpressionParserRuleCall_6_0 = (RuleCall)cExprAssignment_6.eContents().get(0);
		private final RuleCall cPUNC_CLOSE_BRACETerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cPUNC_SEMI_COLONTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//SetDeclaration:
		//	set=ID (PUNC_OPEN_PARENTHESIS paramIdentifier=ID PUNC_CLOSE_PARENTHESIS)? AFFECTATION_OPERATOR PUNC_OPEN_BRACE
		//	elementBinding=ElementBinding "|" expr=SelectionExpression PUNC_CLOSE_BRACE PUNC_SEMI_COLON;
		public ParserRule getRule() { return rule; }

		//set=ID (PUNC_OPEN_PARENTHESIS paramIdentifier=ID PUNC_CLOSE_PARENTHESIS)? AFFECTATION_OPERATOR PUNC_OPEN_BRACE
		//elementBinding=ElementBinding "|" expr=SelectionExpression PUNC_CLOSE_BRACE PUNC_SEMI_COLON
		public Group getGroup() { return cGroup; }

		//set=ID
		public Assignment getSetAssignment_0() { return cSetAssignment_0; }

		//ID
		public RuleCall getSetIDTerminalRuleCall_0_0() { return cSetIDTerminalRuleCall_0_0; }

		//(PUNC_OPEN_PARENTHESIS paramIdentifier=ID PUNC_CLOSE_PARENTHESIS)?
		public Group getGroup_1() { return cGroup_1; }

		//PUNC_OPEN_PARENTHESIS
		public RuleCall getPUNC_OPEN_PARENTHESISTerminalRuleCall_1_0() { return cPUNC_OPEN_PARENTHESISTerminalRuleCall_1_0; }

		//paramIdentifier=ID
		public Assignment getParamIdentifierAssignment_1_1() { return cParamIdentifierAssignment_1_1; }

		//ID
		public RuleCall getParamIdentifierIDTerminalRuleCall_1_1_0() { return cParamIdentifierIDTerminalRuleCall_1_1_0; }

		//PUNC_CLOSE_PARENTHESIS
		public RuleCall getPUNC_CLOSE_PARENTHESISTerminalRuleCall_1_2() { return cPUNC_CLOSE_PARENTHESISTerminalRuleCall_1_2; }

		//AFFECTATION_OPERATOR
		public RuleCall getAFFECTATION_OPERATORTerminalRuleCall_2() { return cAFFECTATION_OPERATORTerminalRuleCall_2; }

		//PUNC_OPEN_BRACE
		public RuleCall getPUNC_OPEN_BRACETerminalRuleCall_3() { return cPUNC_OPEN_BRACETerminalRuleCall_3; }

		//elementBinding=ElementBinding
		public Assignment getElementBindingAssignment_4() { return cElementBindingAssignment_4; }

		//ElementBinding
		public RuleCall getElementBindingElementBindingParserRuleCall_4_0() { return cElementBindingElementBindingParserRuleCall_4_0; }

		//"|"
		public Keyword getVerticalLineKeyword_5() { return cVerticalLineKeyword_5; }

		//expr=SelectionExpression
		public Assignment getExprAssignment_6() { return cExprAssignment_6; }

		//SelectionExpression
		public RuleCall getExprSelectionExpressionParserRuleCall_6_0() { return cExprSelectionExpressionParserRuleCall_6_0; }

		//PUNC_CLOSE_BRACE
		public RuleCall getPUNC_CLOSE_BRACETerminalRuleCall_7() { return cPUNC_CLOSE_BRACETerminalRuleCall_7; }

		//PUNC_SEMI_COLON
		public RuleCall getPUNC_SEMI_COLONTerminalRuleCall_8() { return cPUNC_SEMI_COLONTerminalRuleCall_8; }
	}

	public class ElementBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementIDTerminalRuleCall_0_0 = (RuleCall)cElementAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSetSetExpressionParserRuleCall_2_0 = (RuleCall)cSetAssignment_2.eContents().get(0);
		
		//ElementBinding:
		//	element=ID "in" set=SetExpression;
		public ParserRule getRule() { return rule; }

		//element=ID "in" set=SetExpression
		public Group getGroup() { return cGroup; }

		//element=ID
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }

		//ID
		public RuleCall getElementIDTerminalRuleCall_0_0() { return cElementIDTerminalRuleCall_0_0; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//set=SetExpression
		public Assignment getSetAssignment_2() { return cSetAssignment_2; }

		//SetExpression
		public RuleCall getSetSetExpressionParserRuleCall_2_0() { return cSetSetExpressionParserRuleCall_2_0; }
	}

	public class SelectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cE1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cE1TerminalSelectionExpressionParserRuleCall_0_0 = (RuleCall)cE1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpBooleanOperatorParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cE2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cE2TerminalSelectionExpressionParserRuleCall_1_1_0 = (RuleCall)cE2Assignment_1_1.eContents().get(0);
		
		//SelectionExpression:
		//	e1=TerminalSelectionExpression (op+=BooleanOperator e2+=TerminalSelectionExpression)*;
		public ParserRule getRule() { return rule; }

		//e1=TerminalSelectionExpression (op+=BooleanOperator e2+=TerminalSelectionExpression)*
		public Group getGroup() { return cGroup; }

		//e1=TerminalSelectionExpression
		public Assignment getE1Assignment_0() { return cE1Assignment_0; }

		//TerminalSelectionExpression
		public RuleCall getE1TerminalSelectionExpressionParserRuleCall_0_0() { return cE1TerminalSelectionExpressionParserRuleCall_0_0; }

		//(op+=BooleanOperator e2+=TerminalSelectionExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//op+=BooleanOperator
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//BooleanOperator
		public RuleCall getOpBooleanOperatorParserRuleCall_1_0_0() { return cOpBooleanOperatorParserRuleCall_1_0_0; }

		//e2+=TerminalSelectionExpression
		public Assignment getE2Assignment_1_1() { return cE2Assignment_1_1; }

		//TerminalSelectionExpression
		public RuleCall getE2TerminalSelectionExpressionParserRuleCall_1_1_0() { return cE2TerminalSelectionExpressionParserRuleCall_1_1_0; }
	}

	public class ComputeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComputeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComputeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cPUNC_OPEN_PARENTHESISTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final RuleCall cPUNC_COMMATerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Assignment cNameAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_2_1_0 = (RuleCall)cNameAssignment_2_2_1.eContents().get(0);
		private final RuleCall cPUNC_CLOSE_PARENTHESISTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		
		//ComputeExpression:
		//	"compute" identifier=ID (PUNC_OPEN_PARENTHESIS name+=ID (PUNC_COMMA name+=ID)* PUNC_CLOSE_PARENTHESIS)?;
		public ParserRule getRule() { return rule; }

		//"compute" identifier=ID (PUNC_OPEN_PARENTHESIS name+=ID (PUNC_COMMA name+=ID)* PUNC_CLOSE_PARENTHESIS)?
		public Group getGroup() { return cGroup; }

		//"compute"
		public Keyword getComputeKeyword_0() { return cComputeKeyword_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }

		//(PUNC_OPEN_PARENTHESIS name+=ID (PUNC_COMMA name+=ID)* PUNC_CLOSE_PARENTHESIS)?
		public Group getGroup_2() { return cGroup_2; }

		//PUNC_OPEN_PARENTHESIS
		public RuleCall getPUNC_OPEN_PARENTHESISTerminalRuleCall_2_0() { return cPUNC_OPEN_PARENTHESISTerminalRuleCall_2_0; }

		//name+=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }

		//(PUNC_COMMA name+=ID)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//PUNC_COMMA
		public RuleCall getPUNC_COMMATerminalRuleCall_2_2_0() { return cPUNC_COMMATerminalRuleCall_2_2_0; }

		//name+=ID
		public Assignment getNameAssignment_2_2_1() { return cNameAssignment_2_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_2_1_0() { return cNameIDTerminalRuleCall_2_2_1_0; }

		//PUNC_CLOSE_PARENTHESIS
		public RuleCall getPUNC_CLOSE_PARENTHESISTerminalRuleCall_2_3() { return cPUNC_CLOSE_PARENTHESISTerminalRuleCall_2_3; }
	}

	public class TerminalSelectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalSelectionExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCComputeExpressionParserRuleCall_0_0 = (RuleCall)cCAssignment_0.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cETerminalGenericExpressionParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final Assignment cRAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cRSelectionRelationParserRuleCall_2_0 = (RuleCall)cRAssignment_2.eContents().get(0);
		
		//TerminalSelectionExpression:
		//	c=ComputeExpression | e=TerminalGenericExpression | r=SelectionRelation;
		public ParserRule getRule() { return rule; }

		//c=ComputeExpression | e=TerminalGenericExpression | r=SelectionRelation
		public Alternatives getAlternatives() { return cAlternatives; }

		//c=ComputeExpression
		public Assignment getCAssignment_0() { return cCAssignment_0; }

		//ComputeExpression
		public RuleCall getCComputeExpressionParserRuleCall_0_0() { return cCComputeExpressionParserRuleCall_0_0; }

		//e=TerminalGenericExpression
		public Assignment getEAssignment_1() { return cEAssignment_1; }

		//TerminalGenericExpression
		public RuleCall getETerminalGenericExpressionParserRuleCall_1_0() { return cETerminalGenericExpressionParserRuleCall_1_0; }

		//r=SelectionRelation
		public Assignment getRAssignment_2() { return cRAssignment_2; }

		//SelectionRelation
		public RuleCall getRSelectionRelationParserRuleCall_2_0() { return cRSelectionRelationParserRuleCall_2_0; }
	}

	public class SelectionRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierSelectionRelationIdentifierParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cPUNC_OPEN_PARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsSelectionRelationParameterParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cPUNC_COMMATerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsSelectionRelationParameterParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final RuleCall cPUNC_CLOSE_PARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SelectionRelation:
		//	identifier=SelectionRelationIdentifier PUNC_OPEN_PARENTHESIS (arguments+=SelectionRelationParameter (PUNC_COMMA
		//	arguments+=SelectionRelationParameter)*)? PUNC_CLOSE_PARENTHESIS;
		public ParserRule getRule() { return rule; }

		//identifier=SelectionRelationIdentifier PUNC_OPEN_PARENTHESIS (arguments+=SelectionRelationParameter (PUNC_COMMA
		//arguments+=SelectionRelationParameter)*)? PUNC_CLOSE_PARENTHESIS
		public Group getGroup() { return cGroup; }

		//identifier=SelectionRelationIdentifier
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//SelectionRelationIdentifier
		public RuleCall getIdentifierSelectionRelationIdentifierParserRuleCall_0_0() { return cIdentifierSelectionRelationIdentifierParserRuleCall_0_0; }

		//PUNC_OPEN_PARENTHESIS
		public RuleCall getPUNC_OPEN_PARENTHESISTerminalRuleCall_1() { return cPUNC_OPEN_PARENTHESISTerminalRuleCall_1; }

		//(arguments+=SelectionRelationParameter (PUNC_COMMA arguments+=SelectionRelationParameter)*)?
		public Group getGroup_2() { return cGroup_2; }

		//arguments+=SelectionRelationParameter
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }

		//SelectionRelationParameter
		public RuleCall getArgumentsSelectionRelationParameterParserRuleCall_2_0_0() { return cArgumentsSelectionRelationParameterParserRuleCall_2_0_0; }

		//(PUNC_COMMA arguments+=SelectionRelationParameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//PUNC_COMMA
		public RuleCall getPUNC_COMMATerminalRuleCall_2_1_0() { return cPUNC_COMMATerminalRuleCall_2_1_0; }

		//arguments+=SelectionRelationParameter
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }

		//SelectionRelationParameter
		public RuleCall getArgumentsSelectionRelationParameterParserRuleCall_2_1_1_0() { return cArgumentsSelectionRelationParameterParserRuleCall_2_1_1_0; }

		//PUNC_CLOSE_PARENTHESIS
		public RuleCall getPUNC_CLOSE_PARENTHESISTerminalRuleCall_3() { return cPUNC_CLOSE_PARENTHESISTerminalRuleCall_3; }
	}

	public class SelectionRelationIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionRelationIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIs_Subcomponent_OfKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIs_Bound_ToKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIs_Provided_ClassKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cIs_Connected_ToKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCompare_Property_ValueKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cIs_Called_ByKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cIs_CallingKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cIs_Accessed_ByKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cIs_Connecting_ToKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cIs_Accessing_ToKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cIs_InKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cIs_Passing_ThroughKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//// TODO: Case sensitivity. REAL vs Xtext
		//// Turns literals into tokens
		//SelectionRelationIdentifier:
		//	"Is_Subcomponent_Of" | "Is_Bound_To" | "Is_Provided_Class" | "Is_Connected_To" | "Compare_Property_Value" |
		//	"Is_Called_By" | "Is_Calling" | "Is_Accessed_By" | "Is_Connecting_To" | "Is_Accessing_To" | "Is_In" |
		//	"Is_Passing_Through";
		public ParserRule getRule() { return rule; }

		//"Is_Subcomponent_Of" | "Is_Bound_To" | "Is_Provided_Class" | "Is_Connected_To" | "Compare_Property_Value" |
		//"Is_Called_By" | "Is_Calling" | "Is_Accessed_By" | "Is_Connecting_To" | "Is_Accessing_To" | "Is_In" |
		//"Is_Passing_Through"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Is_Subcomponent_Of"
		public Keyword getIs_Subcomponent_OfKeyword_0() { return cIs_Subcomponent_OfKeyword_0; }

		//"Is_Bound_To"
		public Keyword getIs_Bound_ToKeyword_1() { return cIs_Bound_ToKeyword_1; }

		//"Is_Provided_Class"
		public Keyword getIs_Provided_ClassKeyword_2() { return cIs_Provided_ClassKeyword_2; }

		//"Is_Connected_To"
		public Keyword getIs_Connected_ToKeyword_3() { return cIs_Connected_ToKeyword_3; }

		//"Compare_Property_Value"
		public Keyword getCompare_Property_ValueKeyword_4() { return cCompare_Property_ValueKeyword_4; }

		//"Is_Called_By"
		public Keyword getIs_Called_ByKeyword_5() { return cIs_Called_ByKeyword_5; }

		//"Is_Calling"
		public Keyword getIs_CallingKeyword_6() { return cIs_CallingKeyword_6; }

		//"Is_Accessed_By"
		public Keyword getIs_Accessed_ByKeyword_7() { return cIs_Accessed_ByKeyword_7; }

		//"Is_Connecting_To"
		public Keyword getIs_Connecting_ToKeyword_8() { return cIs_Connecting_ToKeyword_8; }

		//"Is_Accessing_To"
		public Keyword getIs_Accessing_ToKeyword_9() { return cIs_Accessing_ToKeyword_9; }

		//"Is_In"
		public Keyword getIs_InKeyword_10() { return cIs_InKeyword_10; }

		//"Is_Passing_Through"
		public Keyword getIs_Passing_ThroughKeyword_11() { return cIs_Passing_ThroughKeyword_11; }
	}

	public class SelectionRelationParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionRelationParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLLiteralParserRuleCall_0_0 = (RuleCall)cLAssignment_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//SelectionRelationParameter:
		//	l=Literal | identifier=ID;
		public ParserRule getRule() { return rule; }

		//l=Literal | identifier=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//l=Literal
		public Assignment getLAssignment_0() { return cLAssignment_0; }

		//Literal
		public RuleCall getLLiteralParserRuleCall_0_0() { return cLLiteralParserRuleCall_0_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
	}

	public class RequiredDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPUNC_OPEN_PARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTheoremsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTheoremsIDTerminalRuleCall_2_0 = (RuleCall)cTheoremsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTheoremsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTheoremsIDTerminalRuleCall_3_1_0 = (RuleCall)cTheoremsAssignment_3_1.eContents().get(0);
		private final RuleCall cPUNC_CLOSE_PARENTHESISTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cPUNC_SEMI_COLONTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//RequiredDefinition:
		//	"requires" PUNC_OPEN_PARENTHESIS theorems+=ID ("and" theorems+=ID)* PUNC_CLOSE_PARENTHESIS PUNC_SEMI_COLON;
		public ParserRule getRule() { return rule; }

		//"requires" PUNC_OPEN_PARENTHESIS theorems+=ID ("and" theorems+=ID)* PUNC_CLOSE_PARENTHESIS PUNC_SEMI_COLON
		public Group getGroup() { return cGroup; }

		//"requires"
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }

		//PUNC_OPEN_PARENTHESIS
		public RuleCall getPUNC_OPEN_PARENTHESISTerminalRuleCall_1() { return cPUNC_OPEN_PARENTHESISTerminalRuleCall_1; }

		//theorems+=ID
		public Assignment getTheoremsAssignment_2() { return cTheoremsAssignment_2; }

		//ID
		public RuleCall getTheoremsIDTerminalRuleCall_2_0() { return cTheoremsIDTerminalRuleCall_2_0; }

		//("and" theorems+=ID)*
		public Group getGroup_3() { return cGroup_3; }

		//"and"
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }

		//theorems+=ID
		public Assignment getTheoremsAssignment_3_1() { return cTheoremsAssignment_3_1; }

		//ID
		public RuleCall getTheoremsIDTerminalRuleCall_3_1_0() { return cTheoremsIDTerminalRuleCall_3_1_0; }

		//PUNC_CLOSE_PARENTHESIS
		public RuleCall getPUNC_CLOSE_PARENTHESISTerminalRuleCall_4() { return cPUNC_CLOSE_PARENTHESISTerminalRuleCall_4; }

		//PUNC_SEMI_COLON
		public RuleCall getPUNC_SEMI_COLONTerminalRuleCall_5() { return cPUNC_SEMI_COLONTerminalRuleCall_5; }
	}

	public class VerificationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPUNC_OPEN_PARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1GenericExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final RuleCall cPUNC_CLOSE_PARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cPUNC_SEMI_COLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//// Should have verification sub expression but that causes problems with parsing currently
		//VerificationExpression:
		//	"check" PUNC_OPEN_PARENTHESIS e1=GenericExpression PUNC_CLOSE_PARENTHESIS PUNC_SEMI_COLON;
		public ParserRule getRule() { return rule; }

		//"check" PUNC_OPEN_PARENTHESIS e1=GenericExpression PUNC_CLOSE_PARENTHESIS PUNC_SEMI_COLON
		public Group getGroup() { return cGroup; }

		//"check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }

		//PUNC_OPEN_PARENTHESIS
		public RuleCall getPUNC_OPEN_PARENTHESISTerminalRuleCall_1() { return cPUNC_OPEN_PARENTHESISTerminalRuleCall_1; }

		//e1=GenericExpression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//GenericExpression
		public RuleCall getE1GenericExpressionParserRuleCall_2_0() { return cE1GenericExpressionParserRuleCall_2_0; }

		//PUNC_CLOSE_PARENTHESIS
		public RuleCall getPUNC_CLOSE_PARENTHESISTerminalRuleCall_3() { return cPUNC_CLOSE_PARENTHESISTerminalRuleCall_3; }

		//PUNC_SEMI_COLON
		public RuleCall getPUNC_SEMI_COLONTerminalRuleCall_4() { return cPUNC_SEMI_COLONTerminalRuleCall_4; }
	}

	public class EvaluationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EvaluationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPUNC_OPEN_PARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cFAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFAggregationFunctionIdentifierParserRuleCall_2_0 = (RuleCall)cFAssignment_2.eContents().get(0);
		private final RuleCall cPUNC_OPEN_PARENTHESISTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cEAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEGenericExpressionParserRuleCall_4_0 = (RuleCall)cEAssignment_4.eContents().get(0);
		private final RuleCall cPUNC_CLOSE_PARENTHESISTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cPUNC_CLOSE_PARENTHESISTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cPUNC_SEMI_COLONTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//EvaluationExpression:
		//	"return" PUNC_OPEN_PARENTHESIS f=AggregationFunctionIdentifier PUNC_OPEN_PARENTHESIS e=GenericExpression
		//	PUNC_CLOSE_PARENTHESIS PUNC_CLOSE_PARENTHESIS PUNC_SEMI_COLON;
		public ParserRule getRule() { return rule; }

		//"return" PUNC_OPEN_PARENTHESIS f=AggregationFunctionIdentifier PUNC_OPEN_PARENTHESIS e=GenericExpression
		//PUNC_CLOSE_PARENTHESIS PUNC_CLOSE_PARENTHESIS PUNC_SEMI_COLON
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//PUNC_OPEN_PARENTHESIS
		public RuleCall getPUNC_OPEN_PARENTHESISTerminalRuleCall_1() { return cPUNC_OPEN_PARENTHESISTerminalRuleCall_1; }

		//f=AggregationFunctionIdentifier
		public Assignment getFAssignment_2() { return cFAssignment_2; }

		//AggregationFunctionIdentifier
		public RuleCall getFAggregationFunctionIdentifierParserRuleCall_2_0() { return cFAggregationFunctionIdentifierParserRuleCall_2_0; }

		//PUNC_OPEN_PARENTHESIS
		public RuleCall getPUNC_OPEN_PARENTHESISTerminalRuleCall_3() { return cPUNC_OPEN_PARENTHESISTerminalRuleCall_3; }

		//e=GenericExpression
		public Assignment getEAssignment_4() { return cEAssignment_4; }

		//GenericExpression
		public RuleCall getEGenericExpressionParserRuleCall_4_0() { return cEGenericExpressionParserRuleCall_4_0; }

		//PUNC_CLOSE_PARENTHESIS
		public RuleCall getPUNC_CLOSE_PARENTHESISTerminalRuleCall_5() { return cPUNC_CLOSE_PARENTHESISTerminalRuleCall_5; }

		//PUNC_CLOSE_PARENTHESIS
		public RuleCall getPUNC_CLOSE_PARENTHESISTerminalRuleCall_6() { return cPUNC_CLOSE_PARENTHESISTerminalRuleCall_6; }

		//PUNC_SEMI_COLON
		public RuleCall getPUNC_SEMI_COLONTerminalRuleCall_7() { return cPUNC_SEMI_COLONTerminalRuleCall_7; }
	}

	public class GenericExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenericExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cE1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cE1TerminalGenericExpressionParserRuleCall_0_0 = (RuleCall)cE1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpGenericOperatorParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cE2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cE2TerminalGenericExpressionParserRuleCall_1_1_0 = (RuleCall)cE2Assignment_1_1.eContents().get(0);
		
		//GenericExpression:
		//	e1=TerminalGenericExpression (op+=GenericOperator e2+=TerminalGenericExpression)*;
		public ParserRule getRule() { return rule; }

		//e1=TerminalGenericExpression (op+=GenericOperator e2+=TerminalGenericExpression)*
		public Group getGroup() { return cGroup; }

		//e1=TerminalGenericExpression
		public Assignment getE1Assignment_0() { return cE1Assignment_0; }

		//TerminalGenericExpression
		public RuleCall getE1TerminalGenericExpressionParserRuleCall_0_0() { return cE1TerminalGenericExpressionParserRuleCall_0_0; }

		//(op+=GenericOperator e2+=TerminalGenericExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//op+=GenericOperator
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//GenericOperator
		public RuleCall getOpGenericOperatorParserRuleCall_1_0_0() { return cOpGenericOperatorParserRuleCall_1_0_0; }

		//e2+=TerminalGenericExpression
		public Assignment getE2Assignment_1_1() { return cE2Assignment_1_1; }

		//TerminalGenericExpression
		public RuleCall getE2TerminalGenericExpressionParserRuleCall_1_1_0() { return cE2TerminalGenericExpressionParserRuleCall_1_1_0; }
	}

	public class TerminalGenericExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalGenericExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOperatorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLiteralAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_1_0_0 = (RuleCall)cLiteralAssignment_1_0.eContents().get(0);
		private final Assignment cFcAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cFcVerificationFunctionCallParserRuleCall_1_1_0 = (RuleCall)cFcAssignment_1_1.eContents().get(0);
		private final Assignment cTeAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cTeTernaryExpressionParserRuleCall_1_2_0 = (RuleCall)cTeAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final RuleCall cPUNC_OPEN_PARENTHESISTerminalRuleCall_1_3_0 = (RuleCall)cGroup_1_3.eContents().get(0);
		private final RuleCall cGenericExpressionParserRuleCall_1_3_1 = (RuleCall)cGroup_1_3.eContents().get(1);
		private final RuleCall cPUNC_CLOSE_PARENTHESISTerminalRuleCall_1_3_2 = (RuleCall)cGroup_1_3.eContents().get(2);
		
		//TerminalGenericExpression:
		//	UnaryOperator? (literal=Literal | fc=VerificationFunctionCall | te=TernaryExpression | PUNC_OPEN_PARENTHESIS
		//	GenericExpression PUNC_CLOSE_PARENTHESIS);
		public ParserRule getRule() { return rule; }

		//UnaryOperator? (literal=Literal | fc=VerificationFunctionCall | te=TernaryExpression | PUNC_OPEN_PARENTHESIS
		//GenericExpression PUNC_CLOSE_PARENTHESIS)
		public Group getGroup() { return cGroup; }

		//UnaryOperator?
		public RuleCall getUnaryOperatorParserRuleCall_0() { return cUnaryOperatorParserRuleCall_0; }

		//literal=Literal | fc=VerificationFunctionCall | te=TernaryExpression | PUNC_OPEN_PARENTHESIS GenericExpression
		//PUNC_CLOSE_PARENTHESIS
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//literal=Literal
		public Assignment getLiteralAssignment_1_0() { return cLiteralAssignment_1_0; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_1_0_0() { return cLiteralLiteralParserRuleCall_1_0_0; }

		//fc=VerificationFunctionCall
		public Assignment getFcAssignment_1_1() { return cFcAssignment_1_1; }

		//VerificationFunctionCall
		public RuleCall getFcVerificationFunctionCallParserRuleCall_1_1_0() { return cFcVerificationFunctionCallParserRuleCall_1_1_0; }

		//te=TernaryExpression
		public Assignment getTeAssignment_1_2() { return cTeAssignment_1_2; }

		//TernaryExpression
		public RuleCall getTeTernaryExpressionParserRuleCall_1_2_0() { return cTeTernaryExpressionParserRuleCall_1_2_0; }

		//PUNC_OPEN_PARENTHESIS GenericExpression PUNC_CLOSE_PARENTHESIS
		public Group getGroup_1_3() { return cGroup_1_3; }

		//PUNC_OPEN_PARENTHESIS
		public RuleCall getPUNC_OPEN_PARENTHESISTerminalRuleCall_1_3_0() { return cPUNC_OPEN_PARENTHESISTerminalRuleCall_1_3_0; }

		//GenericExpression
		public RuleCall getGenericExpressionParserRuleCall_1_3_1() { return cGenericExpressionParserRuleCall_1_3_1; }

		//PUNC_CLOSE_PARENTHESIS
		public RuleCall getPUNC_CLOSE_PARENTHESISTerminalRuleCall_1_3_2() { return cPUNC_CLOSE_PARENTHESISTerminalRuleCall_1_3_2; }
	}

	public class SetExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cE1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cE1TerminalSetExpressionParserRuleCall_0_0 = (RuleCall)cE1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpSetOperatorParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cE2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cE2TerminalSetExpressionParserRuleCall_1_1_0 = (RuleCall)cE2Assignment_1_1.eContents().get(0);
		
		//SetExpression:
		//	e1=TerminalSetExpression (op+=SetOperator e2+=TerminalSetExpression)*;
		public ParserRule getRule() { return rule; }

		//e1=TerminalSetExpression (op+=SetOperator e2+=TerminalSetExpression)*
		public Group getGroup() { return cGroup; }

		//e1=TerminalSetExpression
		public Assignment getE1Assignment_0() { return cE1Assignment_0; }

		//TerminalSetExpression
		public RuleCall getE1TerminalSetExpressionParserRuleCall_0_0() { return cE1TerminalSetExpressionParserRuleCall_0_0; }

		//(op+=SetOperator e2+=TerminalSetExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//op+=SetOperator
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//SetOperator
		public RuleCall getOpSetOperatorParserRuleCall_1_0_0() { return cOpSetOperatorParserRuleCall_1_0_0; }

		//e2+=TerminalSetExpression
		public Assignment getE2Assignment_1_1() { return cE2Assignment_1_1; }

		//TerminalSetExpression
		public RuleCall getE2TerminalSetExpressionParserRuleCall_1_1_0() { return cE2TerminalSetExpressionParserRuleCall_1_1_0; }
	}

	public class TerminalSetExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalSetExpression");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TerminalSetExpression:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class TernaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TernaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionalGenericExpressionParserRuleCall_1_0 = (RuleCall)cConditionalAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTrueValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTrueValueGenericExpressionParserRuleCall_3_0 = (RuleCall)cTrueValueAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFalseValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFalseValueGenericExpressionParserRuleCall_5_0 = (RuleCall)cFalseValueAssignment_5.eContents().get(0);
		
		//TernaryExpression:
		//	"if" conditional=GenericExpression "then" trueValue=GenericExpression "else" falseValue=GenericExpression;
		public ParserRule getRule() { return rule; }

		//"if" conditional=GenericExpression "then" trueValue=GenericExpression "else" falseValue=GenericExpression
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//conditional=GenericExpression
		public Assignment getConditionalAssignment_1() { return cConditionalAssignment_1; }

		//GenericExpression
		public RuleCall getConditionalGenericExpressionParserRuleCall_1_0() { return cConditionalGenericExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//trueValue=GenericExpression
		public Assignment getTrueValueAssignment_3() { return cTrueValueAssignment_3; }

		//GenericExpression
		public RuleCall getTrueValueGenericExpressionParserRuleCall_3_0() { return cTrueValueGenericExpressionParserRuleCall_3_0; }

		//"else"
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }

		//falseValue=GenericExpression
		public Assignment getFalseValueAssignment_5() { return cFalseValueAssignment_5; }

		//GenericExpression
		public RuleCall getFalseValueGenericExpressionParserRuleCall_5_0() { return cFalseValueGenericExpressionParserRuleCall_5_0; }
	}

	public class VerificationFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFVerificationFunctionIdentifierParserRuleCall_0_0 = (RuleCall)cFAssignment_0.eContents().get(0);
		private final RuleCall cPUNC_OPEN_PARENTHESISTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsVerificationFunctionParameterParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cPUNC_COMMATerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgumentsVerificationFunctionParameterParserRuleCall_3_1_0 = (RuleCall)cArgumentsAssignment_3_1.eContents().get(0);
		private final RuleCall cPUNC_CLOSE_PARENTHESISTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//VerificationFunctionCall:
		//	f=VerificationFunctionIdentifier PUNC_OPEN_PARENTHESIS arguments+=VerificationFunctionParameter (PUNC_COMMA
		//	arguments+=VerificationFunctionParameter)* PUNC_CLOSE_PARENTHESIS;
		public ParserRule getRule() { return rule; }

		//f=VerificationFunctionIdentifier PUNC_OPEN_PARENTHESIS arguments+=VerificationFunctionParameter (PUNC_COMMA
		//arguments+=VerificationFunctionParameter)* PUNC_CLOSE_PARENTHESIS
		public Group getGroup() { return cGroup; }

		//f=VerificationFunctionIdentifier
		public Assignment getFAssignment_0() { return cFAssignment_0; }

		//VerificationFunctionIdentifier
		public RuleCall getFVerificationFunctionIdentifierParserRuleCall_0_0() { return cFVerificationFunctionIdentifierParserRuleCall_0_0; }

		//PUNC_OPEN_PARENTHESIS
		public RuleCall getPUNC_OPEN_PARENTHESISTerminalRuleCall_1() { return cPUNC_OPEN_PARENTHESISTerminalRuleCall_1; }

		//arguments+=VerificationFunctionParameter
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//VerificationFunctionParameter
		public RuleCall getArgumentsVerificationFunctionParameterParserRuleCall_2_0() { return cArgumentsVerificationFunctionParameterParserRuleCall_2_0; }

		//(PUNC_COMMA arguments+=VerificationFunctionParameter)*
		public Group getGroup_3() { return cGroup_3; }

		//PUNC_COMMA
		public RuleCall getPUNC_COMMATerminalRuleCall_3_0() { return cPUNC_COMMATerminalRuleCall_3_0; }

		//arguments+=VerificationFunctionParameter
		public Assignment getArgumentsAssignment_3_1() { return cArgumentsAssignment_3_1; }

		//VerificationFunctionParameter
		public RuleCall getArgumentsVerificationFunctionParameterParserRuleCall_3_1_0() { return cArgumentsVerificationFunctionParameterParserRuleCall_3_1_0; }

		//PUNC_CLOSE_PARENTHESIS
		public RuleCall getPUNC_CLOSE_PARENTHESISTerminalRuleCall_4() { return cPUNC_CLOSE_PARENTHESISTerminalRuleCall_4; }
	}

	public class VerificationFunctionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationFunctionParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLLiteralParserRuleCall_0_0 = (RuleCall)cLAssignment_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Assignment cVfiAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cVfiVerificationFunctionCallParserRuleCall_2_0 = (RuleCall)cVfiAssignment_2.eContents().get(0);
		
		//VerificationFunctionParameter:
		//	l=Literal | identifier=ID | vfi=VerificationFunctionCall;
		public ParserRule getRule() { return rule; }

		//l=Literal | identifier=ID | vfi=VerificationFunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//l=Literal
		public Assignment getLAssignment_0() { return cLAssignment_0; }

		//Literal
		public RuleCall getLLiteralParserRuleCall_0_0() { return cLLiteralParserRuleCall_0_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }

		//vfi=VerificationFunctionCall
		public Assignment getVfiAssignment_2() { return cVfiAssignment_2; }

		//VerificationFunctionCall
		public RuleCall getVfiVerificationFunctionCallParserRuleCall_2_0() { return cVfiVerificationFunctionCallParserRuleCall_2_0; }
	}

	public class AggregationFunctionIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AggregationFunctionIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMSumKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMMaxKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AggregationFunctionIdentifier:
		//	"MSum" | "MMax";
		public ParserRule getRule() { return rule; }

		//"MSum" | "MMax"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"MSum"
		public Keyword getMSumKeyword_0() { return cMSumKeyword_0; }

		//"MMax"
		public Keyword getMMaxKeyword_1() { return cMMaxKeyword_1; }
	}

	public class VerificationFunctionIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationFunctionIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCardinalKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSumKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMaxKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMinKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cProductKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGCDKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLCMKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGet_Property_ValueKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cPropertyKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cProperty_ExistsKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cAll_EqualsKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cExistsKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cSystemKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cFirstKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cLastKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cHeadKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cQueueKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cListKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cSizeKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cFloatKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		
		//VerificationFunctionIdentifier:
		//	"Cardinal" | "Sum" | "Max" | "Min" | "Product" | "GCD" | "LCM" | "Get_Property_Value" | "Property" | "Property_Exists"
		//	| "All_Equals" | "Exists" | "System" | "First" | "Last" | "Head" | "Queue" | "List" | "Size" | "Float";
		public ParserRule getRule() { return rule; }

		//"Cardinal" | "Sum" | "Max" | "Min" | "Product" | "GCD" | "LCM" | "Get_Property_Value" | "Property" | "Property_Exists" |
		//"All_Equals" | "Exists" | "System" | "First" | "Last" | "Head" | "Queue" | "List" | "Size" | "Float"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Cardinal"
		public Keyword getCardinalKeyword_0() { return cCardinalKeyword_0; }

		//"Sum"
		public Keyword getSumKeyword_1() { return cSumKeyword_1; }

		//"Max"
		public Keyword getMaxKeyword_2() { return cMaxKeyword_2; }

		//"Min"
		public Keyword getMinKeyword_3() { return cMinKeyword_3; }

		//"Product"
		public Keyword getProductKeyword_4() { return cProductKeyword_4; }

		//"GCD"
		public Keyword getGCDKeyword_5() { return cGCDKeyword_5; }

		//"LCM"
		public Keyword getLCMKeyword_6() { return cLCMKeyword_6; }

		//"Get_Property_Value"
		public Keyword getGet_Property_ValueKeyword_7() { return cGet_Property_ValueKeyword_7; }

		//"Property"
		public Keyword getPropertyKeyword_8() { return cPropertyKeyword_8; }

		//"Property_Exists"
		public Keyword getProperty_ExistsKeyword_9() { return cProperty_ExistsKeyword_9; }

		//"All_Equals"
		public Keyword getAll_EqualsKeyword_10() { return cAll_EqualsKeyword_10; }

		//"Exists"
		public Keyword getExistsKeyword_11() { return cExistsKeyword_11; }

		//"System"
		public Keyword getSystemKeyword_12() { return cSystemKeyword_12; }

		//"First"
		public Keyword getFirstKeyword_13() { return cFirstKeyword_13; }

		//"Last"
		public Keyword getLastKeyword_14() { return cLastKeyword_14; }

		//"Head"
		public Keyword getHeadKeyword_15() { return cHeadKeyword_15; }

		//"Queue"
		public Keyword getQueueKeyword_16() { return cQueueKeyword_16; }

		//"List"
		public Keyword getListKeyword_17() { return cListKeyword_17; }

		//"Size"
		public Keyword getSizeKeyword_18() { return cSizeKeyword_18; }

		//"Float"
		public Keyword getFloatKeyword_19() { return cFloatKeyword_19; }
	}

	public class GenericOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenericOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComparisonOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArithmeticOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//GenericOperator:
		//	ComparisonOperator | BooleanOperator | ArithmeticOperator;
		public ParserRule getRule() { return rule; }

		//ComparisonOperator | BooleanOperator | ArithmeticOperator
		public Alternatives getAlternatives() { return cAlternatives; }

		//ComparisonOperator
		public RuleCall getComparisonOperatorParserRuleCall_0() { return cComparisonOperatorParserRuleCall_0; }

		//BooleanOperator
		public RuleCall getBooleanOperatorParserRuleCall_1() { return cBooleanOperatorParserRuleCall_1; }

		//ArithmeticOperator
		public RuleCall getArithmeticOperatorParserRuleCall_2() { return cArithmeticOperatorParserRuleCall_2; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBBOOLEANParserRuleCall_0_0 = (RuleCall)cBAssignment_0.eContents().get(0);
		private final Assignment cSAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSSTRINGTerminalRuleCall_1_0 = (RuleCall)cSAssignment_1.eContents().get(0);
		private final Assignment cNAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNNUMERICTerminalRuleCall_2_0 = (RuleCall)cNAssignment_2.eContents().get(0);
		
		//// TODO: String literal syntax...
		//// TODO: Numeric literal snytax
		//Literal:
		//	b=BOOLEAN | s=STRING | n=NUMERIC;
		public ParserRule getRule() { return rule; }

		//b=BOOLEAN | s=STRING | n=NUMERIC
		public Alternatives getAlternatives() { return cAlternatives; }

		//b=BOOLEAN
		public Assignment getBAssignment_0() { return cBAssignment_0; }

		//BOOLEAN
		public RuleCall getBBOOLEANParserRuleCall_0_0() { return cBBOOLEANParserRuleCall_0_0; }

		//s=STRING
		public Assignment getSAssignment_1() { return cSAssignment_1; }

		//STRING
		public RuleCall getSSTRINGTerminalRuleCall_1_0() { return cSSTRINGTerminalRuleCall_1_0; }

		//n=NUMERIC
		public Assignment getNAssignment_2() { return cNAssignment_2; }

		//NUMERIC
		public RuleCall getNNUMERICTerminalRuleCall_2_0() { return cNNUMERICTerminalRuleCall_2_0; }
	}

	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BOOLEAN:
		//	value=("true" | "false");
		public ParserRule getRule() { return rule; }

		//value=("true" | "false")
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"true" | "false"
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//"true"
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_0_1() { return cValueFalseKeyword_0_1; }
	}

	public class SetOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPLUSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTARTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSLASHTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SetOperator:
		//	PLUS | STAR | SLASH;
		public ParserRule getRule() { return rule; }

		//PLUS | STAR | SLASH
		public Alternatives getAlternatives() { return cAlternatives; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0() { return cPLUSTerminalRuleCall_0; }

		//STAR
		public RuleCall getSTARTerminalRuleCall_1() { return cSTARTerminalRuleCall_1; }

		//SLASH
		public RuleCall getSLASHTerminalRuleCall_2() { return cSLASHTerminalRuleCall_2; }
	}

	public class ArithmeticOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArithmeticOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPLUSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMINUSTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTARTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSLASHTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPOWERTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Keyword cModKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ArithmeticOperator:
		//	PLUS | MINUS | STAR | SLASH | POWER | "mod";
		public ParserRule getRule() { return rule; }

		//PLUS | MINUS | STAR | SLASH | POWER | "mod"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0() { return cPLUSTerminalRuleCall_0; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_1() { return cMINUSTerminalRuleCall_1; }

		//STAR
		public RuleCall getSTARTerminalRuleCall_2() { return cSTARTerminalRuleCall_2; }

		//SLASH
		public RuleCall getSLASHTerminalRuleCall_3() { return cSLASHTerminalRuleCall_3; }

		//POWER
		public RuleCall getPOWERTerminalRuleCall_4() { return cPOWERTerminalRuleCall_4; }

		//"mod"
		public Keyword getModKeyword_5() { return cModKeyword_5; }
	}

	public class BooleanOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOrKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//BooleanOperator:
		//	"and" | "not" | "or";
		public ParserRule getRule() { return rule; }

		//"and" | "not" | "or"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"and"
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }

		//"not"
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }

		//"or"
		public Keyword getOrKeyword_2() { return cOrKeyword_2; }
	}

	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final Keyword cNotKeyword = (Keyword)rule.eContents().get(1);
		
		//UnaryOperator:
		//	"not";
		public ParserRule getRule() { return rule; }

		//"not"
		public Keyword getNotKeyword() { return cNotKeyword; }
	}

	public class ComparisonOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLESSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLESS_EQUALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEQUALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGREATER_EQUALTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGREATERTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNOT_EQUALTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ComparisonOperator:
		//	LESS | LESS_EQUAL | EQUAL | GREATER_EQUAL | GREATER | NOT_EQUAL;
		public ParserRule getRule() { return rule; }

		//LESS | LESS_EQUAL | EQUAL | GREATER_EQUAL | GREATER | NOT_EQUAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//LESS
		public RuleCall getLESSTerminalRuleCall_0() { return cLESSTerminalRuleCall_0; }

		//LESS_EQUAL
		public RuleCall getLESS_EQUALTerminalRuleCall_1() { return cLESS_EQUALTerminalRuleCall_1; }

		//EQUAL
		public RuleCall getEQUALTerminalRuleCall_2() { return cEQUALTerminalRuleCall_2; }

		//GREATER_EQUAL
		public RuleCall getGREATER_EQUALTerminalRuleCall_3() { return cGREATER_EQUALTerminalRuleCall_3; }

		//GREATER
		public RuleCall getGREATERTerminalRuleCall_4() { return cGREATERTerminalRuleCall_4; }

		//NOT_EQUAL
		public RuleCall getNOT_EQUALTerminalRuleCall_5() { return cNOT_EQUALTerminalRuleCall_5; }
	}
	
	
	private ModelElements pModel;
	private TheoremElements pTheorem;
	private RangeDefinitionElements pRangeDefinition;
	private VarDeclarationElements pVarDeclaration;
	private SetDeclarationElements pSetDeclaration;
	private ElementBindingElements pElementBinding;
	private SelectionExpressionElements pSelectionExpression;
	private ComputeExpressionElements pComputeExpression;
	private TerminalSelectionExpressionElements pTerminalSelectionExpression;
	private SelectionRelationElements pSelectionRelation;
	private SelectionRelationIdentifierElements pSelectionRelationIdentifier;
	private SelectionRelationParameterElements pSelectionRelationParameter;
	private RequiredDefinitionElements pRequiredDefinition;
	private VerificationExpressionElements pVerificationExpression;
	private EvaluationExpressionElements pEvaluationExpression;
	private GenericExpressionElements pGenericExpression;
	private TerminalGenericExpressionElements pTerminalGenericExpression;
	private SetExpressionElements pSetExpression;
	private TerminalSetExpressionElements pTerminalSetExpression;
	private TernaryExpressionElements pTernaryExpression;
	private VerificationFunctionCallElements pVerificationFunctionCall;
	private VerificationFunctionParameterElements pVerificationFunctionParameter;
	private AggregationFunctionIdentifierElements pAggregationFunctionIdentifier;
	private VerificationFunctionIdentifierElements pVerificationFunctionIdentifier;
	private GenericOperatorElements pGenericOperator;
	private LiteralElements pLiteral;
	private BOOLEANElements pBOOLEAN;
	private SetOperatorElements pSetOperator;
	private ArithmeticOperatorElements pArithmeticOperator;
	private BooleanOperatorElements pBooleanOperator;
	private UnaryOperatorElements pUnaryOperator;
	private ComparisonOperatorElements pComparisonOperator;
	private TerminalRule tPLUS;
	private TerminalRule tPOWER;
	private TerminalRule tSTAR;
	private TerminalRule tSLASH;
	private TerminalRule tMINUS;
	private TerminalRule tNOT_EQUAL;
	private TerminalRule tLESS_EQUAL;
	private TerminalRule tGREATER_EQUAL;
	private TerminalRule tGREATER;
	private TerminalRule tLESS;
	private TerminalRule tEQUAL;
	private TerminalRule tAFFECTATION_OPERATOR;
	private TerminalRule tPUNC_OPEN_BRACE;
	private TerminalRule tPUNC_CLOSE_BRACE;
	private TerminalRule tPUNC_SEMI_COLON;
	private TerminalRule tPUNC_OPEN_PARENTHESIS;
	private TerminalRule tPUNC_CLOSE_PARENTHESIS;
	private TerminalRule tPUNC_COMMA;
	private TerminalRule tID;
	private TerminalRule tSTRING;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tNUMERIC;
	
	private final Grammar grammar;

	@Inject
	public REALGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.ocarina.real.xtext.REAL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	theorems+=Theorem*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Theorem:
	//	"theorem" name=ID rangeDefinition=RangeDefinition requiredDefinition=RequiredDefinition?
	//	(varDeclarations+=VarDeclaration | setDeclarations+=SetDeclaration)* (verificationExpression=VerificationExpression |
	//	evaluationExpression=EvaluationExpression) "end" endName=ID? PUNC_SEMI_COLON;
	public TheoremElements getTheoremAccess() {
		return (pTheorem != null) ? pTheorem : (pTheorem = new TheoremElements());
	}
	
	public ParserRule getTheoremRule() {
		return getTheoremAccess().getRule();
	}

	//RangeDefinition:
	//	"foreach" element=ID "in" set=SetExpression "do";
	public RangeDefinitionElements getRangeDefinitionAccess() {
		return (pRangeDefinition != null) ? pRangeDefinition : (pRangeDefinition = new RangeDefinitionElements());
	}
	
	public ParserRule getRangeDefinitionRule() {
		return getRangeDefinitionAccess().getRule();
	}

	//VarDeclaration:
	//	"var" identifier=ID AFFECTATION_OPERATOR expr=TerminalSelectionExpression PUNC_SEMI_COLON;
	public VarDeclarationElements getVarDeclarationAccess() {
		return (pVarDeclaration != null) ? pVarDeclaration : (pVarDeclaration = new VarDeclarationElements());
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}

	//SetDeclaration:
	//	set=ID (PUNC_OPEN_PARENTHESIS paramIdentifier=ID PUNC_CLOSE_PARENTHESIS)? AFFECTATION_OPERATOR PUNC_OPEN_BRACE
	//	elementBinding=ElementBinding "|" expr=SelectionExpression PUNC_CLOSE_BRACE PUNC_SEMI_COLON;
	public SetDeclarationElements getSetDeclarationAccess() {
		return (pSetDeclaration != null) ? pSetDeclaration : (pSetDeclaration = new SetDeclarationElements());
	}
	
	public ParserRule getSetDeclarationRule() {
		return getSetDeclarationAccess().getRule();
	}

	//ElementBinding:
	//	element=ID "in" set=SetExpression;
	public ElementBindingElements getElementBindingAccess() {
		return (pElementBinding != null) ? pElementBinding : (pElementBinding = new ElementBindingElements());
	}
	
	public ParserRule getElementBindingRule() {
		return getElementBindingAccess().getRule();
	}

	//SelectionExpression:
	//	e1=TerminalSelectionExpression (op+=BooleanOperator e2+=TerminalSelectionExpression)*;
	public SelectionExpressionElements getSelectionExpressionAccess() {
		return (pSelectionExpression != null) ? pSelectionExpression : (pSelectionExpression = new SelectionExpressionElements());
	}
	
	public ParserRule getSelectionExpressionRule() {
		return getSelectionExpressionAccess().getRule();
	}

	//ComputeExpression:
	//	"compute" identifier=ID (PUNC_OPEN_PARENTHESIS name+=ID (PUNC_COMMA name+=ID)* PUNC_CLOSE_PARENTHESIS)?;
	public ComputeExpressionElements getComputeExpressionAccess() {
		return (pComputeExpression != null) ? pComputeExpression : (pComputeExpression = new ComputeExpressionElements());
	}
	
	public ParserRule getComputeExpressionRule() {
		return getComputeExpressionAccess().getRule();
	}

	//TerminalSelectionExpression:
	//	c=ComputeExpression | e=TerminalGenericExpression | r=SelectionRelation;
	public TerminalSelectionExpressionElements getTerminalSelectionExpressionAccess() {
		return (pTerminalSelectionExpression != null) ? pTerminalSelectionExpression : (pTerminalSelectionExpression = new TerminalSelectionExpressionElements());
	}
	
	public ParserRule getTerminalSelectionExpressionRule() {
		return getTerminalSelectionExpressionAccess().getRule();
	}

	//SelectionRelation:
	//	identifier=SelectionRelationIdentifier PUNC_OPEN_PARENTHESIS (arguments+=SelectionRelationParameter (PUNC_COMMA
	//	arguments+=SelectionRelationParameter)*)? PUNC_CLOSE_PARENTHESIS;
	public SelectionRelationElements getSelectionRelationAccess() {
		return (pSelectionRelation != null) ? pSelectionRelation : (pSelectionRelation = new SelectionRelationElements());
	}
	
	public ParserRule getSelectionRelationRule() {
		return getSelectionRelationAccess().getRule();
	}

	//// TODO: Case sensitivity. REAL vs Xtext
	//// Turns literals into tokens
	//SelectionRelationIdentifier:
	//	"Is_Subcomponent_Of" | "Is_Bound_To" | "Is_Provided_Class" | "Is_Connected_To" | "Compare_Property_Value" |
	//	"Is_Called_By" | "Is_Calling" | "Is_Accessed_By" | "Is_Connecting_To" | "Is_Accessing_To" | "Is_In" |
	//	"Is_Passing_Through";
	public SelectionRelationIdentifierElements getSelectionRelationIdentifierAccess() {
		return (pSelectionRelationIdentifier != null) ? pSelectionRelationIdentifier : (pSelectionRelationIdentifier = new SelectionRelationIdentifierElements());
	}
	
	public ParserRule getSelectionRelationIdentifierRule() {
		return getSelectionRelationIdentifierAccess().getRule();
	}

	//SelectionRelationParameter:
	//	l=Literal | identifier=ID;
	public SelectionRelationParameterElements getSelectionRelationParameterAccess() {
		return (pSelectionRelationParameter != null) ? pSelectionRelationParameter : (pSelectionRelationParameter = new SelectionRelationParameterElements());
	}
	
	public ParserRule getSelectionRelationParameterRule() {
		return getSelectionRelationParameterAccess().getRule();
	}

	//RequiredDefinition:
	//	"requires" PUNC_OPEN_PARENTHESIS theorems+=ID ("and" theorems+=ID)* PUNC_CLOSE_PARENTHESIS PUNC_SEMI_COLON;
	public RequiredDefinitionElements getRequiredDefinitionAccess() {
		return (pRequiredDefinition != null) ? pRequiredDefinition : (pRequiredDefinition = new RequiredDefinitionElements());
	}
	
	public ParserRule getRequiredDefinitionRule() {
		return getRequiredDefinitionAccess().getRule();
	}

	//// Should have verification sub expression but that causes problems with parsing currently
	//VerificationExpression:
	//	"check" PUNC_OPEN_PARENTHESIS e1=GenericExpression PUNC_CLOSE_PARENTHESIS PUNC_SEMI_COLON;
	public VerificationExpressionElements getVerificationExpressionAccess() {
		return (pVerificationExpression != null) ? pVerificationExpression : (pVerificationExpression = new VerificationExpressionElements());
	}
	
	public ParserRule getVerificationExpressionRule() {
		return getVerificationExpressionAccess().getRule();
	}

	//EvaluationExpression:
	//	"return" PUNC_OPEN_PARENTHESIS f=AggregationFunctionIdentifier PUNC_OPEN_PARENTHESIS e=GenericExpression
	//	PUNC_CLOSE_PARENTHESIS PUNC_CLOSE_PARENTHESIS PUNC_SEMI_COLON;
	public EvaluationExpressionElements getEvaluationExpressionAccess() {
		return (pEvaluationExpression != null) ? pEvaluationExpression : (pEvaluationExpression = new EvaluationExpressionElements());
	}
	
	public ParserRule getEvaluationExpressionRule() {
		return getEvaluationExpressionAccess().getRule();
	}

	//GenericExpression:
	//	e1=TerminalGenericExpression (op+=GenericOperator e2+=TerminalGenericExpression)*;
	public GenericExpressionElements getGenericExpressionAccess() {
		return (pGenericExpression != null) ? pGenericExpression : (pGenericExpression = new GenericExpressionElements());
	}
	
	public ParserRule getGenericExpressionRule() {
		return getGenericExpressionAccess().getRule();
	}

	//TerminalGenericExpression:
	//	UnaryOperator? (literal=Literal | fc=VerificationFunctionCall | te=TernaryExpression | PUNC_OPEN_PARENTHESIS
	//	GenericExpression PUNC_CLOSE_PARENTHESIS);
	public TerminalGenericExpressionElements getTerminalGenericExpressionAccess() {
		return (pTerminalGenericExpression != null) ? pTerminalGenericExpression : (pTerminalGenericExpression = new TerminalGenericExpressionElements());
	}
	
	public ParserRule getTerminalGenericExpressionRule() {
		return getTerminalGenericExpressionAccess().getRule();
	}

	//SetExpression:
	//	e1=TerminalSetExpression (op+=SetOperator e2+=TerminalSetExpression)*;
	public SetExpressionElements getSetExpressionAccess() {
		return (pSetExpression != null) ? pSetExpression : (pSetExpression = new SetExpressionElements());
	}
	
	public ParserRule getSetExpressionRule() {
		return getSetExpressionAccess().getRule();
	}

	//TerminalSetExpression:
	//	ID;
	public TerminalSetExpressionElements getTerminalSetExpressionAccess() {
		return (pTerminalSetExpression != null) ? pTerminalSetExpression : (pTerminalSetExpression = new TerminalSetExpressionElements());
	}
	
	public ParserRule getTerminalSetExpressionRule() {
		return getTerminalSetExpressionAccess().getRule();
	}

	//TernaryExpression:
	//	"if" conditional=GenericExpression "then" trueValue=GenericExpression "else" falseValue=GenericExpression;
	public TernaryExpressionElements getTernaryExpressionAccess() {
		return (pTernaryExpression != null) ? pTernaryExpression : (pTernaryExpression = new TernaryExpressionElements());
	}
	
	public ParserRule getTernaryExpressionRule() {
		return getTernaryExpressionAccess().getRule();
	}

	//VerificationFunctionCall:
	//	f=VerificationFunctionIdentifier PUNC_OPEN_PARENTHESIS arguments+=VerificationFunctionParameter (PUNC_COMMA
	//	arguments+=VerificationFunctionParameter)* PUNC_CLOSE_PARENTHESIS;
	public VerificationFunctionCallElements getVerificationFunctionCallAccess() {
		return (pVerificationFunctionCall != null) ? pVerificationFunctionCall : (pVerificationFunctionCall = new VerificationFunctionCallElements());
	}
	
	public ParserRule getVerificationFunctionCallRule() {
		return getVerificationFunctionCallAccess().getRule();
	}

	//VerificationFunctionParameter:
	//	l=Literal | identifier=ID | vfi=VerificationFunctionCall;
	public VerificationFunctionParameterElements getVerificationFunctionParameterAccess() {
		return (pVerificationFunctionParameter != null) ? pVerificationFunctionParameter : (pVerificationFunctionParameter = new VerificationFunctionParameterElements());
	}
	
	public ParserRule getVerificationFunctionParameterRule() {
		return getVerificationFunctionParameterAccess().getRule();
	}

	//AggregationFunctionIdentifier:
	//	"MSum" | "MMax";
	public AggregationFunctionIdentifierElements getAggregationFunctionIdentifierAccess() {
		return (pAggregationFunctionIdentifier != null) ? pAggregationFunctionIdentifier : (pAggregationFunctionIdentifier = new AggregationFunctionIdentifierElements());
	}
	
	public ParserRule getAggregationFunctionIdentifierRule() {
		return getAggregationFunctionIdentifierAccess().getRule();
	}

	//VerificationFunctionIdentifier:
	//	"Cardinal" | "Sum" | "Max" | "Min" | "Product" | "GCD" | "LCM" | "Get_Property_Value" | "Property" | "Property_Exists"
	//	| "All_Equals" | "Exists" | "System" | "First" | "Last" | "Head" | "Queue" | "List" | "Size" | "Float";
	public VerificationFunctionIdentifierElements getVerificationFunctionIdentifierAccess() {
		return (pVerificationFunctionIdentifier != null) ? pVerificationFunctionIdentifier : (pVerificationFunctionIdentifier = new VerificationFunctionIdentifierElements());
	}
	
	public ParserRule getVerificationFunctionIdentifierRule() {
		return getVerificationFunctionIdentifierAccess().getRule();
	}

	//GenericOperator:
	//	ComparisonOperator | BooleanOperator | ArithmeticOperator;
	public GenericOperatorElements getGenericOperatorAccess() {
		return (pGenericOperator != null) ? pGenericOperator : (pGenericOperator = new GenericOperatorElements());
	}
	
	public ParserRule getGenericOperatorRule() {
		return getGenericOperatorAccess().getRule();
	}

	//// TODO: String literal syntax...
	//// TODO: Numeric literal snytax
	//Literal:
	//	b=BOOLEAN | s=STRING | n=NUMERIC;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BOOLEAN:
	//	value=("true" | "false");
	public BOOLEANElements getBOOLEANAccess() {
		return (pBOOLEAN != null) ? pBOOLEAN : (pBOOLEAN = new BOOLEANElements());
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}

	//SetOperator:
	//	PLUS | STAR | SLASH;
	public SetOperatorElements getSetOperatorAccess() {
		return (pSetOperator != null) ? pSetOperator : (pSetOperator = new SetOperatorElements());
	}
	
	public ParserRule getSetOperatorRule() {
		return getSetOperatorAccess().getRule();
	}

	//ArithmeticOperator:
	//	PLUS | MINUS | STAR | SLASH | POWER | "mod";
	public ArithmeticOperatorElements getArithmeticOperatorAccess() {
		return (pArithmeticOperator != null) ? pArithmeticOperator : (pArithmeticOperator = new ArithmeticOperatorElements());
	}
	
	public ParserRule getArithmeticOperatorRule() {
		return getArithmeticOperatorAccess().getRule();
	}

	//BooleanOperator:
	//	"and" | "not" | "or";
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return (pBooleanOperator != null) ? pBooleanOperator : (pBooleanOperator = new BooleanOperatorElements());
	}
	
	public ParserRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}

	//UnaryOperator:
	//	"not";
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return (pUnaryOperator != null) ? pUnaryOperator : (pUnaryOperator = new UnaryOperatorElements());
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//ComparisonOperator:
	//	LESS | LESS_EQUAL | EQUAL | GREATER_EQUAL | GREATER | NOT_EQUAL;
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return (pComparisonOperator != null) ? pComparisonOperator : (pComparisonOperator = new ComparisonOperatorElements());
	}
	
	public ParserRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}

	//terminal PLUS:
	//	"+";
	public TerminalRule getPLUSRule() {
		return (tPLUS != null) ? tPLUS : (tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS"));
	} 

	//terminal POWER:
	//	"**";
	public TerminalRule getPOWERRule() {
		return (tPOWER != null) ? tPOWER : (tPOWER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "POWER"));
	} 

	//terminal STAR:
	//	"*";
	public TerminalRule getSTARRule() {
		return (tSTAR != null) ? tSTAR : (tSTAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STAR"));
	} 

	//terminal SLASH:
	//	"/";
	public TerminalRule getSLASHRule() {
		return (tSLASH != null) ? tSLASH : (tSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SLASH"));
	} 

	//terminal MINUS:
	//	"-";
	public TerminalRule getMINUSRule() {
		return (tMINUS != null) ? tMINUS : (tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MINUS"));
	} 

	//terminal NOT_EQUAL:
	//	"<>";
	public TerminalRule getNOT_EQUALRule() {
		return (tNOT_EQUAL != null) ? tNOT_EQUAL : (tNOT_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NOT_EQUAL"));
	} 

	//terminal LESS_EQUAL:
	//	"<=";
	public TerminalRule getLESS_EQUALRule() {
		return (tLESS_EQUAL != null) ? tLESS_EQUAL : (tLESS_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LESS_EQUAL"));
	} 

	//terminal GREATER_EQUAL:
	//	">=";
	public TerminalRule getGREATER_EQUALRule() {
		return (tGREATER_EQUAL != null) ? tGREATER_EQUAL : (tGREATER_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GREATER_EQUAL"));
	} 

	//terminal GREATER:
	//	">";
	public TerminalRule getGREATERRule() {
		return (tGREATER != null) ? tGREATER : (tGREATER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GREATER"));
	} 

	//terminal LESS:
	//	"<";
	public TerminalRule getLESSRule() {
		return (tLESS != null) ? tLESS : (tLESS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LESS"));
	} 

	//terminal EQUAL:
	//	"=";
	public TerminalRule getEQUALRule() {
		return (tEQUAL != null) ? tEQUAL : (tEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQUAL"));
	} 

	//terminal AFFECTATION_OPERATOR:
	//	":=";
	public TerminalRule getAFFECTATION_OPERATORRule() {
		return (tAFFECTATION_OPERATOR != null) ? tAFFECTATION_OPERATOR : (tAFFECTATION_OPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AFFECTATION_OPERATOR"));
	} 

	//terminal PUNC_OPEN_BRACE:
	//	"{";
	public TerminalRule getPUNC_OPEN_BRACERule() {
		return (tPUNC_OPEN_BRACE != null) ? tPUNC_OPEN_BRACE : (tPUNC_OPEN_BRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PUNC_OPEN_BRACE"));
	} 

	//terminal PUNC_CLOSE_BRACE:
	//	"}";
	public TerminalRule getPUNC_CLOSE_BRACERule() {
		return (tPUNC_CLOSE_BRACE != null) ? tPUNC_CLOSE_BRACE : (tPUNC_CLOSE_BRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PUNC_CLOSE_BRACE"));
	} 

	//terminal PUNC_SEMI_COLON:
	//	";";
	public TerminalRule getPUNC_SEMI_COLONRule() {
		return (tPUNC_SEMI_COLON != null) ? tPUNC_SEMI_COLON : (tPUNC_SEMI_COLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PUNC_SEMI_COLON"));
	} 

	//terminal PUNC_OPEN_PARENTHESIS:
	//	"(";
	public TerminalRule getPUNC_OPEN_PARENTHESISRule() {
		return (tPUNC_OPEN_PARENTHESIS != null) ? tPUNC_OPEN_PARENTHESIS : (tPUNC_OPEN_PARENTHESIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PUNC_OPEN_PARENTHESIS"));
	} 

	//terminal PUNC_CLOSE_PARENTHESIS:
	//	")";
	public TerminalRule getPUNC_CLOSE_PARENTHESISRule() {
		return (tPUNC_CLOSE_PARENTHESIS != null) ? tPUNC_CLOSE_PARENTHESIS : (tPUNC_CLOSE_PARENTHESIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PUNC_CLOSE_PARENTHESIS"));
	} 

	//terminal PUNC_COMMA:
	//	",";
	public TerminalRule getPUNC_COMMARule() {
		return (tPUNC_COMMA != null) ? tPUNC_COMMA : (tPUNC_COMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PUNC_COMMA"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//// Note: Rule may broader than what REAL supports. Not included in BNF
	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//// Not a strict rule. Should be enough to cover all types of numeric values supported by REAL
	//terminal NUMERIC:
	//	("0".."9" | "." | "+" | "-" | "a".."z" | "A".."Z")+;
	public TerminalRule getNUMERICRule() {
		return (tNUMERIC != null) ? tNUMERIC : (tNUMERIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMERIC"));
	} 
}
