/*
* generated by Xtext
*/
package org.osate.ocarina.real.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.osate.ocarina.real.xtext.services.REALGrammarAccess;

public class REALParser extends AbstractContentAssistParser {
	
	@Inject
	private REALGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.osate.ocarina.real.xtext.ui.contentassist.antlr.internal.InternalREALParser createParser() {
		org.osate.ocarina.real.xtext.ui.contentassist.antlr.internal.InternalREALParser result = new org.osate.ocarina.real.xtext.ui.contentassist.antlr.internal.InternalREALParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTheoremAccess().getAlternatives_4(), "rule__Theorem__Alternatives_4");
					put(grammarAccess.getTheoremAccess().getAlternatives_5(), "rule__Theorem__Alternatives_5");
					put(grammarAccess.getTerminalSelectionExpressionAccess().getAlternatives(), "rule__TerminalSelectionExpression__Alternatives");
					put(grammarAccess.getSelectionRelationIdentifierAccess().getAlternatives(), "rule__SelectionRelationIdentifier__Alternatives");
					put(grammarAccess.getSelectionRelationParameterAccess().getAlternatives(), "rule__SelectionRelationParameter__Alternatives");
					put(grammarAccess.getTerminalGenericExpressionAccess().getAlternatives_1(), "rule__TerminalGenericExpression__Alternatives_1");
					put(grammarAccess.getVerificationFunctionParameterAccess().getAlternatives(), "rule__VerificationFunctionParameter__Alternatives");
					put(grammarAccess.getAggregationFunctionIdentifierAccess().getAlternatives(), "rule__AggregationFunctionIdentifier__Alternatives");
					put(grammarAccess.getVerificationFunctionIdentifierAccess().getAlternatives(), "rule__VerificationFunctionIdentifier__Alternatives");
					put(grammarAccess.getGenericOperatorAccess().getAlternatives(), "rule__GenericOperator__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getBOOLEANAccess().getValueAlternatives_0(), "rule__BOOLEAN__ValueAlternatives_0");
					put(grammarAccess.getSetOperatorAccess().getAlternatives(), "rule__SetOperator__Alternatives");
					put(grammarAccess.getArithmeticOperatorAccess().getAlternatives(), "rule__ArithmeticOperator__Alternatives");
					put(grammarAccess.getBooleanOperatorAccess().getAlternatives(), "rule__BooleanOperator__Alternatives");
					put(grammarAccess.getComparisonOperatorAccess().getAlternatives(), "rule__ComparisonOperator__Alternatives");
					put(grammarAccess.getTheoremAccess().getGroup(), "rule__Theorem__Group__0");
					put(grammarAccess.getRangeDefinitionAccess().getGroup(), "rule__RangeDefinition__Group__0");
					put(grammarAccess.getVarDeclarationAccess().getGroup(), "rule__VarDeclaration__Group__0");
					put(grammarAccess.getSetDeclarationAccess().getGroup(), "rule__SetDeclaration__Group__0");
					put(grammarAccess.getSetDeclarationAccess().getGroup_1(), "rule__SetDeclaration__Group_1__0");
					put(grammarAccess.getElementBindingAccess().getGroup(), "rule__ElementBinding__Group__0");
					put(grammarAccess.getSelectionExpressionAccess().getGroup(), "rule__SelectionExpression__Group__0");
					put(grammarAccess.getSelectionExpressionAccess().getGroup_1(), "rule__SelectionExpression__Group_1__0");
					put(grammarAccess.getComputeExpressionAccess().getGroup(), "rule__ComputeExpression__Group__0");
					put(grammarAccess.getComputeExpressionAccess().getGroup_2(), "rule__ComputeExpression__Group_2__0");
					put(grammarAccess.getComputeExpressionAccess().getGroup_2_2(), "rule__ComputeExpression__Group_2_2__0");
					put(grammarAccess.getSelectionRelationAccess().getGroup(), "rule__SelectionRelation__Group__0");
					put(grammarAccess.getSelectionRelationAccess().getGroup_2(), "rule__SelectionRelation__Group_2__0");
					put(grammarAccess.getSelectionRelationAccess().getGroup_2_1(), "rule__SelectionRelation__Group_2_1__0");
					put(grammarAccess.getRequiredDefinitionAccess().getGroup(), "rule__RequiredDefinition__Group__0");
					put(grammarAccess.getRequiredDefinitionAccess().getGroup_3(), "rule__RequiredDefinition__Group_3__0");
					put(grammarAccess.getVerificationExpressionAccess().getGroup(), "rule__VerificationExpression__Group__0");
					put(grammarAccess.getEvaluationExpressionAccess().getGroup(), "rule__EvaluationExpression__Group__0");
					put(grammarAccess.getGenericExpressionAccess().getGroup(), "rule__GenericExpression__Group__0");
					put(grammarAccess.getGenericExpressionAccess().getGroup_1(), "rule__GenericExpression__Group_1__0");
					put(grammarAccess.getTerminalGenericExpressionAccess().getGroup(), "rule__TerminalGenericExpression__Group__0");
					put(grammarAccess.getTerminalGenericExpressionAccess().getGroup_1_3(), "rule__TerminalGenericExpression__Group_1_3__0");
					put(grammarAccess.getSetExpressionAccess().getGroup(), "rule__SetExpression__Group__0");
					put(grammarAccess.getSetExpressionAccess().getGroup_1(), "rule__SetExpression__Group_1__0");
					put(grammarAccess.getTernaryExpressionAccess().getGroup(), "rule__TernaryExpression__Group__0");
					put(grammarAccess.getVerificationFunctionCallAccess().getGroup(), "rule__VerificationFunctionCall__Group__0");
					put(grammarAccess.getVerificationFunctionCallAccess().getGroup_3(), "rule__VerificationFunctionCall__Group_3__0");
					put(grammarAccess.getModelAccess().getTheoremsAssignment(), "rule__Model__TheoremsAssignment");
					put(grammarAccess.getTheoremAccess().getNameAssignment_1(), "rule__Theorem__NameAssignment_1");
					put(grammarAccess.getTheoremAccess().getRangeDefinitionAssignment_2(), "rule__Theorem__RangeDefinitionAssignment_2");
					put(grammarAccess.getTheoremAccess().getRequiredDefinitionAssignment_3(), "rule__Theorem__RequiredDefinitionAssignment_3");
					put(grammarAccess.getTheoremAccess().getVarDeclarationsAssignment_4_0(), "rule__Theorem__VarDeclarationsAssignment_4_0");
					put(grammarAccess.getTheoremAccess().getSetDeclarationsAssignment_4_1(), "rule__Theorem__SetDeclarationsAssignment_4_1");
					put(grammarAccess.getTheoremAccess().getVerificationExpressionAssignment_5_0(), "rule__Theorem__VerificationExpressionAssignment_5_0");
					put(grammarAccess.getTheoremAccess().getEvaluationExpressionAssignment_5_1(), "rule__Theorem__EvaluationExpressionAssignment_5_1");
					put(grammarAccess.getTheoremAccess().getEndNameAssignment_7(), "rule__Theorem__EndNameAssignment_7");
					put(grammarAccess.getRangeDefinitionAccess().getElementAssignment_1(), "rule__RangeDefinition__ElementAssignment_1");
					put(grammarAccess.getRangeDefinitionAccess().getSetAssignment_3(), "rule__RangeDefinition__SetAssignment_3");
					put(grammarAccess.getVarDeclarationAccess().getIdentifierAssignment_1(), "rule__VarDeclaration__IdentifierAssignment_1");
					put(grammarAccess.getVarDeclarationAccess().getExprAssignment_3(), "rule__VarDeclaration__ExprAssignment_3");
					put(grammarAccess.getSetDeclarationAccess().getSetAssignment_0(), "rule__SetDeclaration__SetAssignment_0");
					put(grammarAccess.getSetDeclarationAccess().getParamIdentifierAssignment_1_1(), "rule__SetDeclaration__ParamIdentifierAssignment_1_1");
					put(grammarAccess.getSetDeclarationAccess().getElementBindingAssignment_4(), "rule__SetDeclaration__ElementBindingAssignment_4");
					put(grammarAccess.getSetDeclarationAccess().getExprAssignment_6(), "rule__SetDeclaration__ExprAssignment_6");
					put(grammarAccess.getElementBindingAccess().getElementAssignment_0(), "rule__ElementBinding__ElementAssignment_0");
					put(grammarAccess.getElementBindingAccess().getSetAssignment_2(), "rule__ElementBinding__SetAssignment_2");
					put(grammarAccess.getSelectionExpressionAccess().getE1Assignment_0(), "rule__SelectionExpression__E1Assignment_0");
					put(grammarAccess.getSelectionExpressionAccess().getOpAssignment_1_0(), "rule__SelectionExpression__OpAssignment_1_0");
					put(grammarAccess.getSelectionExpressionAccess().getE2Assignment_1_1(), "rule__SelectionExpression__E2Assignment_1_1");
					put(grammarAccess.getComputeExpressionAccess().getIdentifierAssignment_1(), "rule__ComputeExpression__IdentifierAssignment_1");
					put(grammarAccess.getComputeExpressionAccess().getNameAssignment_2_1(), "rule__ComputeExpression__NameAssignment_2_1");
					put(grammarAccess.getComputeExpressionAccess().getNameAssignment_2_2_1(), "rule__ComputeExpression__NameAssignment_2_2_1");
					put(grammarAccess.getTerminalSelectionExpressionAccess().getCAssignment_0(), "rule__TerminalSelectionExpression__CAssignment_0");
					put(grammarAccess.getTerminalSelectionExpressionAccess().getEAssignment_1(), "rule__TerminalSelectionExpression__EAssignment_1");
					put(grammarAccess.getTerminalSelectionExpressionAccess().getRAssignment_2(), "rule__TerminalSelectionExpression__RAssignment_2");
					put(grammarAccess.getSelectionRelationAccess().getIdentifierAssignment_0(), "rule__SelectionRelation__IdentifierAssignment_0");
					put(grammarAccess.getSelectionRelationAccess().getArgumentsAssignment_2_0(), "rule__SelectionRelation__ArgumentsAssignment_2_0");
					put(grammarAccess.getSelectionRelationAccess().getArgumentsAssignment_2_1_1(), "rule__SelectionRelation__ArgumentsAssignment_2_1_1");
					put(grammarAccess.getSelectionRelationParameterAccess().getLAssignment_0(), "rule__SelectionRelationParameter__LAssignment_0");
					put(grammarAccess.getSelectionRelationParameterAccess().getIdentifierAssignment_1(), "rule__SelectionRelationParameter__IdentifierAssignment_1");
					put(grammarAccess.getRequiredDefinitionAccess().getTheoremsAssignment_2(), "rule__RequiredDefinition__TheoremsAssignment_2");
					put(grammarAccess.getRequiredDefinitionAccess().getTheoremsAssignment_3_1(), "rule__RequiredDefinition__TheoremsAssignment_3_1");
					put(grammarAccess.getVerificationExpressionAccess().getE1Assignment_2(), "rule__VerificationExpression__E1Assignment_2");
					put(grammarAccess.getEvaluationExpressionAccess().getFAssignment_2(), "rule__EvaluationExpression__FAssignment_2");
					put(grammarAccess.getEvaluationExpressionAccess().getEAssignment_4(), "rule__EvaluationExpression__EAssignment_4");
					put(grammarAccess.getGenericExpressionAccess().getE1Assignment_0(), "rule__GenericExpression__E1Assignment_0");
					put(grammarAccess.getGenericExpressionAccess().getOpAssignment_1_0(), "rule__GenericExpression__OpAssignment_1_0");
					put(grammarAccess.getGenericExpressionAccess().getE2Assignment_1_1(), "rule__GenericExpression__E2Assignment_1_1");
					put(grammarAccess.getTerminalGenericExpressionAccess().getLiteralAssignment_1_0(), "rule__TerminalGenericExpression__LiteralAssignment_1_0");
					put(grammarAccess.getTerminalGenericExpressionAccess().getFcAssignment_1_1(), "rule__TerminalGenericExpression__FcAssignment_1_1");
					put(grammarAccess.getTerminalGenericExpressionAccess().getTeAssignment_1_2(), "rule__TerminalGenericExpression__TeAssignment_1_2");
					put(grammarAccess.getSetExpressionAccess().getE1Assignment_0(), "rule__SetExpression__E1Assignment_0");
					put(grammarAccess.getSetExpressionAccess().getOpAssignment_1_0(), "rule__SetExpression__OpAssignment_1_0");
					put(grammarAccess.getSetExpressionAccess().getE2Assignment_1_1(), "rule__SetExpression__E2Assignment_1_1");
					put(grammarAccess.getTernaryExpressionAccess().getConditionalAssignment_1(), "rule__TernaryExpression__ConditionalAssignment_1");
					put(grammarAccess.getTernaryExpressionAccess().getTrueValueAssignment_3(), "rule__TernaryExpression__TrueValueAssignment_3");
					put(grammarAccess.getTernaryExpressionAccess().getFalseValueAssignment_5(), "rule__TernaryExpression__FalseValueAssignment_5");
					put(grammarAccess.getVerificationFunctionCallAccess().getFAssignment_0(), "rule__VerificationFunctionCall__FAssignment_0");
					put(grammarAccess.getVerificationFunctionCallAccess().getArgumentsAssignment_2(), "rule__VerificationFunctionCall__ArgumentsAssignment_2");
					put(grammarAccess.getVerificationFunctionCallAccess().getArgumentsAssignment_3_1(), "rule__VerificationFunctionCall__ArgumentsAssignment_3_1");
					put(grammarAccess.getVerificationFunctionParameterAccess().getLAssignment_0(), "rule__VerificationFunctionParameter__LAssignment_0");
					put(grammarAccess.getVerificationFunctionParameterAccess().getIdentifierAssignment_1(), "rule__VerificationFunctionParameter__IdentifierAssignment_1");
					put(grammarAccess.getVerificationFunctionParameterAccess().getVfiAssignment_2(), "rule__VerificationFunctionParameter__VfiAssignment_2");
					put(grammarAccess.getLiteralAccess().getBAssignment_0(), "rule__Literal__BAssignment_0");
					put(grammarAccess.getLiteralAccess().getSAssignment_1(), "rule__Literal__SAssignment_1");
					put(grammarAccess.getLiteralAccess().getNAssignment_2(), "rule__Literal__NAssignment_2");
					put(grammarAccess.getBOOLEANAccess().getValueAssignment(), "rule__BOOLEAN__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.osate.ocarina.real.xtext.ui.contentassist.antlr.internal.InternalREALParser typedParser = (org.osate.ocarina.real.xtext.ui.contentassist.antlr.internal.InternalREALParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT" };
	}
	
	public REALGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(REALGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
